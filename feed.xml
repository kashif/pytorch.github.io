<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://pytorch.org/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://pytorch.org/" rel="alternate" type="text/html" />
  <updated>2024-01-11T17:02:18-08:00</updated>
  <id>https://pytorch.org/feed.xml</id>

  
  
  

  
    <title type="html">PyTorch Website</title>
  

  
    <subtitle>Scientific Computing...</subtitle>
  

  
    <author>
        <name>Facebook</name>
      
      
    </author>
  

  
  
  
    <entry>
      <title type="html">Finetune LLMs on your own consumer hardware using tools from PyTorch and Hugging Face ecosystem</title>
      <link href="https://pytorch.org/blog/finetune-llms/" rel="alternate" type="text/html" title="Finetune LLMs on your own consumer hardware using tools from PyTorch and Hugging Face ecosystem" />
      <published>2024-01-10T00:00:00-08:00</published>
      <updated>2024-01-10T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/finetune-llms</id>
      <content type="html" xml:base="https://pytorch.org/blog/finetune-llms/">&lt;p&gt;We demonstrate how to finetune a 7B parameter model on a typical consumer GPU (NVIDIA T4 16GB) with LoRA and tools from the PyTorch and Hugging Face ecosystem with complete reproducible Google Colab notebook.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Large Language Models (LLMs) have shown impressive capabilities in industrial applications. Often, developers seek to tailor these LLMs for specific use-cases and applications to fine-tune them for better performance. However, LLMs are large by design and require a large number of GPUs to be fine-tuned.&lt;/p&gt;

&lt;p&gt;Let’s focus on a specific example by trying to fine-tune a Llama model on a free-tier Google Colab instance (1x NVIDIA T4 16GB). Llama-2 7B has 7 billion parameters, with a total of 28GB in case the model is loaded in full-precision. Given our GPU memory constraint (16GB), the model cannot even be loaded, much less trained on our GPU. This memory requirement can be divided by two with negligible performance degradation. You can read more about running models in half-precision and mixed precision for training &lt;a href=&quot;https://huggingface.co/docs/transformers/v4.15.0/performance#forward-vs-backward-execution-speed&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-makes-our-llama-fine-tuning-expensive&quot;&gt;What makes our Llama fine-tuning expensive?&lt;/h2&gt;

&lt;p&gt;In the case of full fine-tuning with Adam optimizer using a half-precision model and mixed-precision mode, we need to allocate per parameter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 bytes for the weight&lt;/li&gt;
  &lt;li&gt;2 bytes for the gradient&lt;/li&gt;
  &lt;li&gt;4 + 8 bytes for the Adam optimizer states&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ With a total of 16 bytes per trainable parameter, this makes a total of &lt;strong&gt;112GB&lt;/strong&gt; (excluding the intermediate hidden states). Given that the largest GPU available today can have up to 80GB GPU VRAM, it makes fine-tuning challenging and less accessible to everyone. To bridge this gap, Parameter Efficient Fine-Tuning (PEFT) methods are largely adopted today by the community.&lt;/p&gt;

&lt;h2 id=&quot;parameter-efficient-fine-tuning-peft-methods&quot;&gt;Parameter Efficient Fine-Tuning (PEFT) methods&lt;/h2&gt;

&lt;p&gt;PEFT methods aim at drastically reducing the number of trainable parameters of a model while keeping the same performance as full fine-tuning.&lt;/p&gt;

&lt;p&gt;They can be differentiated by their conceptual framework: does the method fine-tune a subset of existing parameters, introduce new parameters, introduce trainable prompts, etc.? We recommend readers to have a look at the paper shared below that extensively compares existing PEFT methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg1.png&quot; alt=&quot;Venn diagram&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image taken from the paper: &lt;a href=&quot;https://arxiv.org/pdf/2303.15647.pdf&quot;&gt;Scaling Down to Scale Up: A Guide to Parameter-Efficient Fine-Tuning&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this blog post, we will focus on Low-Rank Adaption for Large Language Models (LoRA), as it is one of the most adopted PEFT methods by the community.&lt;/p&gt;

&lt;h2 id=&quot;low-rank-adaptation-for-large-language-models-lora-using--peft&quot;&gt;Low-Rank Adaptation for Large Language Models (LoRA) using 🤗 PEFT&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2106.09685.pdf&quot;&gt;The LoRA method&lt;/a&gt; by Hu et al. from the Microsoft team came out in 2021, and works by attaching extra trainable parameters into a model(that we will denote by &lt;em&gt;base model&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;To make fine-tuning more efficient, LoRA decomposes a large weight matrix into two smaller, low-rank matrices (called update matrices). These new matrices can be trained to adapt to the new data while keeping the overall number of changes low. The original weight matrix remains frozen and doesn’t receive any further adjustments. To produce the final results, both the original and the adapted weights are combined.&lt;/p&gt;

&lt;p&gt;This approach has several advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LoRA makes fine-tuning more efficient by drastically reducing the number of trainable parameters.&lt;/li&gt;
  &lt;li&gt;The original pre-trained weights are kept frozen, which means you can have multiple lightweight and portable LoRA models for various downstream tasks built on top of them.&lt;/li&gt;
  &lt;li&gt;LoRA is orthogonal to many other parameter-efficient methods and can be combined with many of them.&lt;/li&gt;
  &lt;li&gt;The performance of models fine-tuned using LoRA is comparable to the performance of fully fine-tuned models.&lt;/li&gt;
  &lt;li&gt;LoRA does not add any inference latency when adapter weights are merged with the base model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In principle, LoRA can be applied to any subset of weight matrices in a neural network to reduce the number of trainable parameters. However, for simplicity and further parameter efficiency, in Transformer models LoRA is typically applied to attention blocks only. The resulting number of trainable parameters in a LoRA model depends on the size of the low-rank update matrices, which is determined mainly by the rank r and the shape of the original weight matrix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg2.gif&quot; alt=&quot;Animated diagram that show how LoRA works in practice&quot; style=&quot;width:100%;max-width:600px; margin-left: auto; margin-right: auto; display:block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Animated diagram that show how LoRA works in practice - original content adapter from the figure 1 of LoRA &lt;a href=&quot;https://arxiv.org/abs/2106.09685&quot;&gt;original paper&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Below is a code snippet showing how to train LoRA model using  Hugging Face PEFT library:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg3.png&quot; alt=&quot;code snippet showing how to train LoRA model using  Hugging Face PEFT library&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-base-model-can-be-in-any-dtype-leveraging-sota-llm-quantization-and-loading-the-base-model-in-4-bit-precision&quot;&gt;The base model can be in any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dtype&lt;/code&gt;: leveraging SOTA LLM quantization and loading the base model in 4-bit precision&lt;/h2&gt;

&lt;p&gt;According to the LoRA formulation, the base model can be compressed in any data type (&lt;em&gt;‘dtype’&lt;/em&gt;) as long as the hidden states from the base model are in the same dtype as the output hidden states from the LoRA matrices.&lt;/p&gt;

&lt;p&gt;Compressing and quantizing large language models has recently become an exciting topic as SOTA models become larger and more difficult to serve and use for end users. Many people in the community proposed various approaches for effectively compressing LLMs with minimal performance degradation.&lt;/p&gt;

&lt;p&gt;This is where the &lt;a href=&quot;https://github.com/TimDettmers/bitsandbytes&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitsandbytes&lt;/code&gt;&lt;/a&gt; library comes in. Its purpose is to make cutting-edge research by Tim Dettmers, a leading academic expert on quantization and the use of deep learning hardware accelerators, accessible to the general public.&lt;/p&gt;

&lt;h2 id=&quot;qlora-one-of-the-core-contributions-of-bitsandbytes-towards-the-democratization-of-ai&quot;&gt;QLoRA: One of the core contributions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitsandbytes&lt;/code&gt; towards the democratization of AI&lt;/h2&gt;

&lt;p&gt;Quantization of LLMs has largely focused on quantization for inference, but the &lt;a href=&quot;https://arxiv.org/abs/2305.14314&quot;&gt;QLoRA&lt;/a&gt; (Quantized model weights + Low-Rank Adapters) paper showed the breakthrough utility of using backpropagation through frozen, quantized weights at large model scales.&lt;/p&gt;

&lt;p&gt;With QLoRA we are matching 16-bit fine-tuning performance across all scales and models, while reducing fine-tuning memory footprint by more than 90%— thereby allowing fine-tuning of SOTA models on consumer-grade hardware.&lt;/p&gt;

&lt;p&gt;In this approach, LoRA is pivotal both for purposes of fine-tuning &lt;span style=&quot;text-decoration:underline;&quot;&gt;and&lt;/span&gt; the correction of minimal, residual quantization errors. Due to the significantly reduced size of the quantized model it becomes possible to generously place low-rank adaptors at every network layer, which together still make up just 0.2% of the original model’s weight memory footprint. Through such usage of LoRA, we achieve performance that has been shown to be equivalent to 16-bit full model finetuning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg4.png&quot; alt=&quot;System diagram&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to generous use of LoRA, to achieve high-fidelity fine-tuning of 4-bit models, QLoRA uses 3 further algorithmic tricks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;4-bit NormalFloat (NF4) quantization, a custom data type exploiting the property of the normal distribution of model weights and distributing an equal number of weights (per block) to each quantization bin—thereby enhancing information density.&lt;/li&gt;
  &lt;li&gt;Double Quantization, quantization of the quantization constants (further savings).&lt;/li&gt;
  &lt;li&gt;Paged Optimizers, preventing memory spikes during gradient checkpointing from causing out-of-memory errors.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An interesting aspect is the dequantization of 4-bit weights in the GPU cache, with matrix multiplication performed as a 16-bit floating point operation. In other words, we use a &lt;em&gt;low-precision storage data type&lt;/em&gt; (in our case 4-bit, but in principle interchangeable) and one normal precision &lt;em&gt;computation data type&lt;/em&gt;. This is important because the latter defaults to 32-bit for hardware compatibility and numerical stability reasons, &lt;span style=&quot;text-decoration:underline;&quot;&gt;but should be set to the optimal BFloat16 for newer hardware supporting it&lt;/span&gt; to achieve the best performance.&lt;/p&gt;

&lt;p&gt;To conclude, through combining these refinements to the quantization process and generous use of LoRA, we compress the model by over 90% and retain full model performance without the usual quantization degradation, while also retaining full fine-tuning capabilities with 16-bit LoRA adapters at every layer.&lt;/p&gt;

&lt;h2 id=&quot;using-qlora-in-practice&quot;&gt;Using QLoRA in practice&lt;/h2&gt;

&lt;p&gt;These SOTA quantization methods come packaged in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitsandbytes&lt;/code&gt; library and are conveniently integrated with HuggingFace 🤗 Transformers. For instance, to use LLM.int8 and QLoRA algorithms, respectively, simply pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_in_8bit&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_in_4bit&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_pretrained&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import torch
from transformers import AutoModelForCausalLM, AutoTokenizer

model_id = &quot;facebook/opt-125m&quot;
# For LLM.int8()
# model = AutoModelForCausalLM.from_pretrained(model_id, load_in_8bit=True)

# For QLoRA
model = AutoModelForCausalLM.from_pretrained(model_id, load_in_4bit=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can read more about quantization features in this specific section of the documentation: &lt;a href=&quot;https://huggingface.co/docs/transformers/main_classes/quantization&quot;&gt;https://huggingface.co/docs/transformers/main_classes/quantization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using QLoRA with Adam optimizer using a 4-bit base model and mixed-precision mode, we need to allocate per parameter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;~0.5 bytes for the weight&lt;/li&gt;
  &lt;li&gt;2 bytes for the gradient&lt;/li&gt;
  &lt;li&gt;4 + 8 bytes for the Adam optimizer states&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Giving a total of 14 bytes per trainable parameter times 0.0029 as we end up having only 0.29% trainable parameters with QLoRA, this makes the QLoRA training setup cost around 4.5GB to fit, but requires in practice ~7-10GB to include intermediate hidden states which are always in half-precision (7 GB for a sequence length of 512 and 10GB for a sequence length of 1024) in the Google Colab demo shared in the next section.&lt;/p&gt;

&lt;p&gt;Below is the code snippet showing how to train QLoRA model using Hugging Face PEFT:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg5.png&quot; alt=&quot;code snippet showing how to train QLoRA model using Hugging Face PEFT&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-trl-for-llm-training&quot;&gt;Using TRL for LLM training&lt;/h2&gt;

&lt;p&gt;Models such as ChatGPT, GPT-4, and Claude are powerful language models that have been fine-tuned using a method called Reinforcement Learning from Human Feedback (RLHF) to be better aligned with how we expect them to behave and would like to use them. The finetuning goes through 3 steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Supervised Fine-tuning (SFT)&lt;/li&gt;
  &lt;li&gt;Reward / preference modeling (RM)&lt;/li&gt;
  &lt;li&gt;Reinforcement Learning from Human Feedback (RLHF)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg6.png&quot; alt=&quot;Process diagram&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;From InstructGPT paper: Ouyang, Long, et al. “Training language models to follow instructions with human feedback.” arXiv preprint arXiv:2203.02155 (2022).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here, we will only focus on the supervised fine-tuning step. We train the model on the new dataset following a process similar to that of pretraining. The objective is to predict the next token (causal language modeling). Multiple techniques can be applied to make the training more efficient:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Packing&lt;/strong&gt;: Instead of having one text per sample in the batch and then padding to either the longest text or the maximal context of the model, we concatenate a lot of texts with an End-Of-Sentence (EOS) token in between and cut chunks of the context size to fill the batch without any padding. This approach significantly improves training efficiency as each token processed by the model contributes to training.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg7.png&quot; alt=&quot;Sample diagram&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Train on completion only&lt;/strong&gt;: We want the model to be able to understand the prompt and generate an answer/. Instead of training the model on the whole input (prompt + answer), the training will be more efficient if we only train the model on completion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can perform supervised fine-tuning with these techniques using SFTTrainer:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from trl import SFTTrainer

trainer = SFTTrainer(
    model=model,
    args=training_arguments,
    train_dataset=train_dataset,
    dataset_text_field=&quot;text&quot;,
    max_seq_length=1024,
    packing=True,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since SFTTrainer back-end is powered by 🤗&lt;a href=&quot;https://github.com/huggingface/accelerate&quot;&gt;accelerate&lt;/a&gt;, you can easily adapt the training to your hardware setup in one line of code!&lt;/p&gt;

&lt;p&gt;For example, with you have 2 GPUs, you can perform Distributed Data Parallel training with using the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;accelerate launch --num_processes=2 training_llama_script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;putting-all-the-pieces-together&quot;&gt;Putting all the pieces together&lt;/h2&gt;

&lt;p&gt;We made a complete reproducible Google Colab notebook that you can check through&lt;a href=&quot;https://colab.research.google.com/drive/1vIjBtePIZwUaHWfjfNHzBjwuXOyU_ugD?usp=sharing&quot;&gt; this link&lt;/a&gt;. We use all the components shared in the sections above and fine-tune a llama-7b model on UltraChat dataset using QLoRA. As it can be observed through the screenshot below, when using a sequence length of 1024 and a batch size od 4,  the memory usage remains very  low (around 10GB).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/finetune-llms/fg8.png&quot; alt=&quot;Memory usage diagram&quot; style=&quot;width:100%;max-width:600px; margin-left: auto; margin-right: auto; display:block;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Younes Belkada, Marc Sun, Titus von Köller, Sourab Mangrulkar, Benjamin Bossan, Lysandre Debut, Steven Liu</name>
        
        
      </author>

      

      

      
        <summary type="html">We demonstrate how to finetune a 7B parameter model on a typical consumer GPU (NVIDIA T4 16GB) with LoRA and tools from the PyTorch and Hugging Face ecosystem with complete reproducible Google Colab notebook.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Accelerate AI models on GPU using Amazon SageMaker multi-model endpoints with TorchServe, saving up to 75% on inference costs</title>
      <link href="https://pytorch.org/blog/amazon-sagemaker-w-torchserve/" rel="alternate" type="text/html" title="Accelerate AI models on GPU using Amazon SageMaker multi-model endpoints with TorchServe, saving up to 75% on inference costs" />
      <published>2024-01-09T00:00:00-08:00</published>
      <updated>2024-01-09T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/amazon-sagemaker-w-torchserve</id>
      <content type="html" xml:base="https://pytorch.org/blog/amazon-sagemaker-w-torchserve/">&lt;p&gt;Multi-model endpoints (MMEs) are a powerful feature of &lt;a href=&quot;https://aws.amazon.com/sagemaker/&quot;&gt;Amazon SageMaker&lt;/a&gt; designed to simplify the deployment and operation of machine learning (ML) models. With MMEs, you can host multiple models on a single serving container and host all the models behind a single endpoint. The SageMaker platform automatically manages the loading and unloading of models and scales resources based on traffic patterns, reducing the operational burden of managing a large quantity of models. This feature is particularly beneficial for deep learning and generative AI models that require accelerated compute. The cost savings achieved through resource sharing and simplified model management makes SageMaker MMEs an excellent choice for you to host models at scale on AWS.&lt;/p&gt;

&lt;p&gt;Recently, generative AI applications have captured widespread attention and imagination. Customers want to deploy generative AI models on GPUs but at the same time are conscious of costs. SageMaker MMEs support GPU instances and is a great option for these types of applications. Today, we are excited to announce TorchServe support for SageMaker MMEs. This new model server support gives you the advantage of all the benefits of MMEs while still using the serving stack that TorchServe customers are most familiar with. In this post, we demonstrate how to host generative AI models, such as Stable Diffusion and Segment Anything Model, on SageMaker MMEs using TorchServe and build a language-guided editing solution that can help artists and content creators develop and iterate their artwork faster.&lt;/p&gt;

&lt;h2 id=&quot;solution-overview&quot;&gt;Solution overview&lt;/h2&gt;

&lt;p&gt;Language-guided editing is a common cross-industry generative AI use case. It can help artists and content creators work more efficiently to meet content demand by automating repetitive tasks, optimizing campaigns, and providing a hyper-personalized experience for the end customer. Businesses can benefit from increased content output, cost savings, improved personalization, and enhanced customer experience. In this post, we demonstrate how you can build language-assisted editing features using MME TorchServe that allow you to erase any unwanted object from an image and modify or replace any object in an image by supplying a text instruction.&lt;/p&gt;

&lt;p&gt;The user experience flow for each use case is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To remove an unwanted object, the select the object from the image to highlight it. This action sends the pixel coordinates and the original image to a generative AI model, which generates a segmentation mask for the object. After confirming the correct object selection, you can send the original and mask images to a second model for removal. The detailed illustration of this user flow is demonstrated below.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

&lt;img alt=&quot;Dog on a bench with mouse pointer clicking the dog&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg1.png&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;

&lt;img alt=&quot;Dog on a bench highlighted&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg2.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;

&lt;img alt=&quot;A bench without the dog&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg3.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Select an object (“dog”) from the image
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Confirm the correct object is highlighted
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Erase the object from the image
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;To modify or replace an object, the select and highlight the desired object, following the same process as described above. Once you confirm the correct object selection, you can modify the object by supplying the original image, the mask, and a text prompt. The model will then change the highlighted object based on the provided instructions. A detailed illustration of this second user flow is as follows.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

&lt;img alt=&quot;A vase with a cactus and mouse pointer&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg4.png&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;

&lt;img alt=&quot;A vase highlighted&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg5.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;

&lt;img alt=&quot;A rounded vase with a cactus&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg6.jpg&quot; style=&quot;width:100%; max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Select an object (“vase”) from the image
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Confirm the correct object is highlighted
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Provide a text prompt (“futuristic vase”) to modify the object
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;To power this solution, we use three generative AI models: Segment Anything Model (SAM), Large Mask Inpainting Model (LaMa), and Stable Diffusion Inpaint (SD). Here are how these models been utilized in the user experience workflow:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;To remove an unwanted object&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;To modify or replace an object&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;

&lt;img alt=&quot;flow diagram&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg7.png&quot; style=&quot;width:100%;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;

&lt;img alt=&quot;flow diagram&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg8.png&quot; style=&quot;width:100%;&quot; /&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;Segment Anything Model (SAM) is used to generate a segment mask of the object of interest. Developed by Meta Research, SAM is an open-source model that can segment any object in an image. This model has been trained on a massive dataset known as SA-1B, which comprises over 11 million images and 1.1 billion segmentation masks. For more information on SAM, refer to their &lt;a href=&quot;https://advimman.github.io/lama-project/&quot;&gt;website&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/2109.07161&quot;&gt;research paper&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;LaMa is used to remove any undesired objects from an image. LaMa is a Generative Adversarial Network (GAN) model specializes in fill missing parts of images using irregular masks. The model architecture incorporates image-wide global context and a single-step architecture that uses Fourier convolutions, enabling it to achieve state-of-the-art results at a faster speed. For more details on LaMa, visit their &lt;a href=&quot;https://advimman.github.io/lama-project/&quot;&gt;website&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/2109.07161&quot;&gt;research paper&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;SD 2 inpaint model from Stability AI is used to modify or replace objects in an image. This model allows us to edit the object in the mask area by providing a text prompt. The inpaint model is based on the text-to-image SD model, which can create high-quality images with a simple text prompt. It provides additional arguments such as original and mask images, allowing for quick modification and restoration of existing content. To learn more about Stable Diffusion models on AWS, refer to &lt;a href=&quot;https://aws.amazon.com/blogs/machine-learning/create-high-quality-images-with-stable-diffusion-models-and-deploy-them-cost-efficiently-with-amazon-sagemaker/&quot;&gt;Create high-quality images with Stable Diffusion models and deploy them cost-efficiently with Amazon SageMaker.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All three models are hosted on SageMaker MMEs, which reduces the operational burden from managing multiple endpoints. In addition to that, using MME eliminates concerns about certain models being underutilized because resources are shared. You can observe the benefit from improved instance saturation, which ultimately leads to cost savings. The following architecture diagram illustrates how all three models are served using SageMaker MMEs with TorchServe.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;flow diagram&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg9.jpg&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have published the code to implement this solution architecture in our &lt;a href=&quot;https://github.com/lxning/amazon-sagemaker-examples/tree/feat/torchserve-mme-gpu/inference/torchserve/mme-gpu&quot;&gt;GitHub repository&lt;/a&gt;. To follow along with the rest of the post, use the notebook file. It is recommended to run this example on a SageMaker notebook instance using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda_python3&lt;/code&gt; (Python 3.10.10) kernel.&lt;/p&gt;

&lt;h2 id=&quot;extend-the-torchserve-container&quot;&gt;Extend the TorchServe container&lt;/h2&gt;

&lt;p&gt;The first step is to prepare the model hosting container. SageMaker provides a managed PyTorch Deep Learning Container (DLC) that you can retrieve using the following code snippet:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Use SageMaker PyTorch DLC as base image
baseimage = sagemaker.image_uris.retrieve(
    framework=&quot;pytorch&quot;,
    region=region,
    py_version=&quot;py310&quot;,
    image_scope=&quot;inference&quot;,
    version=&quot;2.0.0&quot;,
    instance_type=&quot;ml.g5.2xlarge&quot;,
)
print(baseimage)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because the models require resources and additional packages that are not on the base PyTorch DLC, you need to build a Docker image. This image is then uploaded to &lt;a href=&quot;http://aws.amazon.com/ecr/&quot;&gt;Amazon Elastic Container Registry&lt;/a&gt; (Amazon ECR) so we can access directly from SageMaker. The custom installed libraries are listed in the Docker file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ARG BASE_IMAGE

FROM $BASE_IMAGE

#Install any additional libraries
RUN pip install segment-anything-py==1.0
RUN pip install opencv-python-headless==4.7.0.68
RUN pip install matplotlib==3.6.3
RUN pip install diffusers
RUN pip install tqdm
RUN pip install easydict
RUN pip install scikit-image
RUN pip install xformers
RUN pip install tensorflow
RUN pip install joblib
RUN pip install matplotlib
RUN pip install albumentations==0.5.2
RUN pip install hydra-core==1.1.0
RUN pip install pytorch-lightning
RUN pip install tabulate
RUN pip install kornia==0.5.0
RUN pip install webdataset
RUN pip install omegaconf==2.1.2
RUN pip install transformers==4.28.1
RUN pip install accelerate
RUN pip install ftfy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the shell command file to build the custom image locally and push it to Amazon ECR:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%%capture build_output

reponame = &quot;torchserve-mme-demo&quot;
versiontag = &quot;genai-0.1&quot;

# Build our own docker image
!cd workspace/docker &amp;amp;&amp;amp; ./build_and_push.sh {reponame} {versiontag} {baseimage} {region} {account}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;prepare-the-model-artifacts&quot;&gt;Prepare the model artifacts&lt;/h2&gt;

&lt;p&gt;The main difference for the new MMEs with TorchServe support is how you prepare your model artifacts. The code repo provides a skeleton folder for each model (models folder) to house the required files for TorchServe. We follow the same four-step process to prepare each model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar&lt;/code&gt; file. The following code is an example of the skeleton folder for the SD model:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workspace
|--sd
   |-- custom_handler.py
   |-- model-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first step is to download the pre-trained model checkpoints in the models folder:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import diffusers
import torch
import transformers

pipeline = diffusers.StableDiffusionInpaintPipeline.from_pretrained(
    &quot;stabilityai/stable-diffusion-2-inpainting&quot;, torch_dtype=torch.float16
)

sd_dir = &quot;workspace/sd/model&quot;
pipeline.save_pretrained(sd_dir)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next step is to define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom_handler.py&lt;/code&gt; file. This is required to define the behavior of the model when it receives a request, such as loading the model, preprocessing the input, and postprocessing the output. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle&lt;/code&gt; method is the main entry point for requests, and it accepts a request object and returns a response object. It loads the pre-trained model checkpoints and applies the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preprocess&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postprocess&lt;/code&gt; methods to the input and output data. The following code snippet illustrates a simple structure of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom_handler.py&lt;/code&gt; file. For more detail, refer to the &lt;a href=&quot;https://github.com/pytorch/serve/blob/4e2126277cff57e61e455097987c3be7d625f384/docs/custom_service.md?plain=1#L10&quot;&gt;TorchServe handler API.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def initialize(self, ctx: Context):

def preprocess(self, data):

def inference(self, data):

def handle(self, data, context):
    requests = self.preprocess(data)
    responses = self.inference(requests)

    return responses
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last required file for TorchServe is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model-config.yaml&lt;/code&gt;. The file defines the configuration of the model server, such as number of workers and batch size. The configuration is at a per-model level, and an example config file is shown in the following code. For a complete list of parameters, refer to the &lt;a href=&quot;https://github.com/pytorch/serve/blob/master/frontend/archive/src/main/java/org/pytorch/serve/archive/model/ModelConfig.java#L14&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minWorkers: 1
maxWorkers: 1
batchSize: 1
maxBatchDelay: 200
responseTimeout: 300
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The final step is to package all the model artifacts into a single .tar.gz file using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch-model-archiver&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!torch-model-archiver --model-name sd --version 1.0 --handler workspace/sd/custom_handler.py --extra-files workspace/sd/model --config-file workspace/sam/model-config.yaml --archive-format no-archive!cd sd &amp;amp;&amp;amp; tar cvzf sd.tar.gz .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-the-multi-model-endpoint&quot;&gt;Create the multi-model endpoint&lt;/h2&gt;

&lt;p&gt;The steps to create a SageMaker MME are the same as before. In this particular example, you spin up an endpoint using the SageMaker SDK. Start by defining an &lt;a href=&quot;http://aws.amazon.com/s3&quot;&gt;Amazon Simple Storage Service&lt;/a&gt; (Amazon S3) location and the hosting container. This S3 location is where SageMaker will dynamically load the models base on invocation patterns. The hosting container is the custom container you built and pushed to Amazon ECR in the earlier step. See the following code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This is where our MME will read models from on S3.
multi_model_s3uri = output_path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you want to define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MulitDataModel&lt;/code&gt; that captures all the attributes like model location, hosting container, and permission access:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(multi_model_s3uri)
model = Model(
    model_data=f&quot;{multi_model_s3uri}/sam.tar.gz&quot;,
    image_uri=container,
    role=role,
    sagemaker_session=smsess,
    env={&quot;TF_ENABLE_ONEDNN_OPTS&quot;: &quot;0&quot;},
)

mme = MultiDataModel(
    name=&quot;torchserve-mme-genai-&quot; + datetime.now().strftime(&quot;%Y-%m-%d-%H-%M-%S&quot;),
    model_data_prefix=multi_model_s3uri,
    model=model,
    sagemaker_session=smsess,
)
print(mme)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy()&lt;/code&gt; function creates an endpoint configuration and hosts the endpoint:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mme.deploy(
    initial_instance_count=1,
    instance_type=&quot;ml.g5.2xlarge&quot;,
    serializer=sagemaker.serializers.JSONSerializer(),
    deserializer=sagemaker.deserializers.JSONDeserializer(),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example we provided, we also show how you can list models and dynamically add new models using the SDK. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_model()&lt;/code&gt; function copies your local model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar&lt;/code&gt; files into the MME S3 location:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Only sam.tar.gz visible!
list(mme.list_models())

models = [&quot;sd/sd.tar.gz&quot;, &quot;lama/lama.tar.gz&quot;]
for model in models:
    mme.add_model(model_data_source=model)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;invoke-the-models&quot;&gt;Invoke the models&lt;/h2&gt;

&lt;p&gt;Now that we have all three models hosted on an MME, we can invoke each model in sequence to build our language-assisted editing features. To invoke each model, provide a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_model&lt;/code&gt; parameter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;predictor.predict()&lt;/code&gt; function. The model name is just the name of the model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tar&lt;/code&gt; file we uploaded. The following is an example code snippet for the SAM model that takes in a pixel coordinate, a point label, and dilate kernel size, and generates a segmentation mask of the object in the pixel location:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;img_file = &quot;workspace/test_data/sample1.png&quot;
img_bytes = None

with Image.open(img_file) as f:
    img_bytes = encode_image(f)

gen_args = json.dumps(dict(point_coords=[750, 500], point_labels=1, dilate_kernel_size=15))

payload = json.dumps({&quot;image&quot;: img_bytes, &quot;gen_args&quot;: gen_args}).encode(&quot;utf-8&quot;)

response = predictor.predict(data=payload, target_model=&quot;/sam.tar.gz&quot;)
encoded_masks_string = json.loads(response.decode(&quot;utf-8&quot;))[&quot;generated_image&quot;]
base64_bytes_masks = base64.b64decode(encoded_masks_string)

with Image.open(io.BytesIO(base64_bytes_masks)) as f:
    generated_image_rgb = f.convert(&quot;RGB&quot;)
    generated_image_rgb.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To remove an unwanted object from an image, take the segmentation mask generated from SAM and feed that into the LaMa model with the original image. The following images show an example.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;img alt=&quot;Dog on a bench&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg9b.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;

&lt;img alt=&quot;White mask of dog on black background&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg10.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;

&lt;img alt=&quot;Just a bench&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg3.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Sample image
   &lt;/td&gt;
   &lt;td&gt;Segmentation mask from SAM
   &lt;/td&gt;
   &lt;td&gt;Erase the dog using LaMa
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;To modify or replace any object in an image with a text prompt, take the segmentation mask from SAM and feed it into SD model with the original image and text prompt, as shown in the following example.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;img alt=&quot;Dog on a bench&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg9b.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;
&lt;img alt=&quot;White mask of dog on black background&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg10.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
   &lt;td&gt;
&lt;img alt=&quot;Hamster on a bench&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg11.jpg&quot; style=&quot;width:100%;max-width: 258px;&quot; /&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Sample image
   &lt;/td&gt;
   &lt;td&gt;Segmentation mask from SAM
   &lt;/td&gt;
   &lt;td&gt;Replace using SD model with text prompt
		&lt;br /&gt;
		“a hamster on a bench”
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;cost-savings&quot;&gt;Cost savings&lt;/h2&gt;

&lt;p&gt;The benefits of SageMaker MMEs increase based on the scale of model consolidation. The following table shows the GPU memory usage of the three models in this post. They are deployed on one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g5.2xlarge&lt;/code&gt; instance by using one SageMaker MME.&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Model&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;GPU Memory (MiB)&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Segment Anything Model
   &lt;/td&gt;
   &lt;td&gt;3,362
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Stable Diffusion In Paint
   &lt;/td&gt;
   &lt;td&gt;3,910
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Lama
   &lt;/td&gt;
   &lt;td&gt;852
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;You can see cost savings when hosting the three models with one endpoint, and for use cases with hundreds or thousands of models, the savings are much greater.&lt;/p&gt;

&lt;p&gt;For example, consider 100 Stable Diffusion models. Each of the models on its own could be served by an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ml.g5.2xlarge&lt;/code&gt; endpoint (4 GiB memory), costing &lt;span&gt;$&lt;/span&gt;1.52 per instance hour in the US East (N. Virginia) Region. To provide all 100 models using their own endpoint would cost &lt;span&gt;$&lt;/span&gt;218,880 per month. With a SageMaker MME, a single endpoint using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ml.g5.2xlarge&lt;/code&gt; instances can host four models simultaneously. This reduces production inference costs by 75% to only &lt;span&gt;$&lt;/span&gt;54,720 per month. The following table summarizes the differences between single-model and multi-model endpoints for this example. Given an endpoint configuration with sufficient memory for your target models, steady state invocation latency after all models have been loaded will be similar to that of a single-model endpoint.&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Single-model endpoint&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Multi-model endpoint&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Total endpoint price per month
   &lt;/td&gt;
   &lt;td&gt;$218,880
   &lt;/td&gt;
   &lt;td&gt;$54,720
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Endpoint instance type
   &lt;/td&gt;
   &lt;td&gt;ml.g5.2xlarge
   &lt;/td&gt;
   &lt;td&gt;ml.g5.2xlarge
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;CPU Memory capacity (GiB)
   &lt;/td&gt;
   &lt;td&gt;32
   &lt;/td&gt;
   &lt;td&gt;32
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;GPU Memory capacity (GiB)
   &lt;/td&gt;
   &lt;td&gt;24
   &lt;/td&gt;
   &lt;td&gt;24
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Endpoint price per hour
   &lt;/td&gt;
   &lt;td&gt;$1.52
   &lt;/td&gt;
   &lt;td&gt;$1.52
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Number of instances per endpoint
   &lt;/td&gt;
   &lt;td&gt;2
   &lt;/td&gt;
   &lt;td&gt;2
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Endpoints needed for 100 models
   &lt;/td&gt;
   &lt;td&gt;100
   &lt;/td&gt;
   &lt;td&gt;25
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;clean-up&quot;&gt;Clean up&lt;/h2&gt;

&lt;p&gt;After you are done, please follow the instructions in the cleanup section of the notebook to delete the resources provisioned in this post to avoid unnecessary charges. Refer to &lt;a href=&quot;https://aws.amazon.com/sagemaker/pricing/&quot;&gt;Amazon SageMaker Pricing&lt;/a&gt; for details on the cost of the inference instances.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This post demonstrates the language-assisted editing capabilities made possible through the use of generative AI models hosted on SageMaker MMEs with TorchServe. The example we shared illustrates how we can use resource sharing and simplified model management with SageMaker MMEs while still utilizing TorchServe as our model serving stack. We utilized three deep learning foundation models: SAM, SD 2 Inpainting, and LaMa. These models enable us to build powerful capabilities, such as erasing any unwanted object from an image and modifying or replacing any object in an image by supplying a text instruction. These features can help artists and content creators work more efficiently and meet their content demands by automating repetitive tasks, optimizing campaigns, and providing a hyper-personalized experience. We invite you to explore the example provided in this post and build your own UI experience using TorchServe on a SageMaker MME.&lt;/p&gt;

&lt;p&gt;To get started, see &lt;a href=&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/multi-model-endpoints.html#multi-model-support&quot;&gt;Supported algorithms, frameworks, and instances for multi-model endpoints using GPU backed instances&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;about-the-authors&quot;&gt;About the authors&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img alt=&quot;James Wu&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg12.jpg&quot; style=&quot;width: 150px;&quot; /&gt;
&lt;/td&gt;
&lt;td style=&quot;vertical-align: top;&quot;&gt;
&lt;strong&gt;James Wu&lt;/strong&gt; is a Senior AI/ML Specialist Solution Architect at AWS. helping customers design and build AI/ML solutions. James’s work covers a wide range of ML use cases, with a primary interest in computer vision, deep learning, and scaling ML across the enterprise. Prior to joining AWS, James was an architect, developer, and technology leader for over 10 years, including 6 years in engineering and 4 years in marketing &amp;amp; advertising industries.
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
&lt;img alt=&quot;Li Ning&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg13.jpg&quot; style=&quot;width: 150px;&quot; /&gt;
&lt;/td&gt;
&lt;td style=&quot;vertical-align: top;&quot;&gt;

&lt;strong&gt;Li Ning&lt;/strong&gt; is a senior software engineer at AWS with a specialization in building large-scale AI solutions. As a tech lead for TorchServe, a project jointly developed by AWS and Meta, her passion lies in leveraging PyTorch and AWS SageMaker to help customers embrace AI for the greater good. Outside of her professional endeavors, Li enjoys swimming, traveling, following the latest advancements in technology, and spending quality time with her family.
&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td&gt;
&lt;img alt=&quot;Ankith Gunapal&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg14.jpg&quot; style=&quot;width: 150px;&quot; /&gt;
&lt;/td&gt;
&lt;td style=&quot;vertical-align: top;&quot;&gt;
&lt;strong&gt;Ankith Gunapal&lt;/strong&gt; is an AI Partner Engineer at Meta (PyTorch). He is passionate about model optimization and model serving, with experience ranging from RTL verification, embedded software, computer vision, to PyTorch. He holds a Master’s in Data Science and a Master’s in Telecommunications. Outside of work, Ankith is also an electronic dance music producer.

&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td&gt;
&lt;img alt=&quot;Saurabh Trikande&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg15.jpg&quot; style=&quot;width: 150px;&quot; /&gt;
&lt;/td&gt;
&lt;td style=&quot;vertical-align: top;&quot;&gt;
&lt;strong&gt;Saurabh Trikande&lt;/strong&gt; is a Senior Product Manager for Amazon SageMaker Inference. He is passionate about working with customers and is motivated by the goal of democratizing machine learning. He focuses on core challenges related to deploying complex ML applications, multi-tenant ML models, cost optimizations, and making deployment of deep learning models more accessible. In his spare time, Saurabh enjoys hiking, learning about innovative technologies, following TechCrunch and spending time with his family.

&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td&gt;
&lt;img alt=&quot;Subhash Talluri&quot; src=&quot;/assets/images/amazon-sagemaker-w-torchserve/fg16.jpg&quot; style=&quot;width: 150px;&quot; /&gt;
&lt;/td&gt;
&lt;td style=&quot;vertical-align: top;&quot;&gt;
&lt;strong&gt;Subhash Talluri&lt;/strong&gt; is a Lead AI/ML solutions architect of the Telecom Industry business unit at Amazon Web Services. He’s been leading development of innovative AI/ML solutions for Telecom customers and partners worldwide. He brings interdisciplinary expertise in engineering and computer science to help build scalable, secure, and compliant AI/ML solutions via cloud-optimized architectures on AWS.

&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;</content>

      
      
      
      
      

      <author>
          <name>James Wu, Ankith Gunapal, Li Ning, Subhash Talluri, and Saurabh Trikande</name>
        
        
      </author>

      

      

      
        <summary type="html">Multi-model endpoints (MMEs) are a powerful feature of Amazon SageMaker designed to simplify the deployment and operation of machine learning (ML) models. With MMEs, you can host multiple models on a single serving container and host all the models behind a single endpoint. The SageMaker platform automatically manages the loading and unloading of models and scales resources based on traffic patterns, reducing the operational burden of managing a large quantity of models. This feature is particularly beneficial for deep learning and generative AI models that require accelerated compute. The cost savings achieved through resource sharing and simplified model management makes SageMaker MMEs an excellent choice for you to host models at scale on AWS.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Accelerating Generative AI Part III: Diffusion, Fast</title>
      <link href="https://pytorch.org/blog/accelerating-generative-ai-3/" rel="alternate" type="text/html" title="Accelerating Generative AI Part III: Diffusion, Fast" />
      <published>2024-01-03T00:00:00-08:00</published>
      <updated>2024-01-03T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/accelerating-generative-ai-3</id>
      <content type="html" xml:base="https://pytorch.org/blog/accelerating-generative-ai-3/">&lt;p&gt;This post is the third part of a multi-series blog focused on how to accelerate generative AI models with pure, native PyTorch. We are excited to share a breadth of newly released PyTorch performance features alongside practical examples to see how far we can push PyTorch native performance. In part one, we showed how to accelerate &lt;a href=&quot;https://pytorch.org/blog/accelerating-generative-ai/&quot;&gt;Segment Anything over 8x&lt;/a&gt; using only pure, native PyTorch. In part two, we showed how to accelerate &lt;a href=&quot;https://pytorch.org/blog/accelerating-generative-ai-2/&quot;&gt;Llama-7B by almost 10x&lt;/a&gt; using only native PyTorch optimizations. In this blog, we’ll focus on speeding up text-to-image diffusion models by upto 3x.&lt;/p&gt;

&lt;p&gt;We will leverage an array of optimizations including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Running with the bfloat16 precision&lt;/li&gt;
  &lt;li&gt;scaled_dot_product_attention (SPDA)&lt;/li&gt;
  &lt;li&gt;torch.compile&lt;/li&gt;
  &lt;li&gt;Combining q,k,v projections for attention computation&lt;/li&gt;
  &lt;li&gt;Dynamic int8 quantization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will primarily focus on Stable Diffusion XL (SDXL), demonstrating a latency improvement of 3x. These techniques are PyTorch-native, which means you don’t have to rely on any third-party libraries or any C++ code to take advantage of them.&lt;/p&gt;

&lt;p&gt;Enabling these optimizations with the 🤗Diffusers library takes just a few lines of code. If you’re already feeling excited and cannot wait to jump to the code, check out the accompanying repository here: &lt;a href=&quot;https://github.com/huggingface/diffusion-fast&quot;&gt;https://github.com/huggingface/diffusion-fast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg1.png&quot; alt=&quot;SDXL Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The discussed techniques are not SDXL-specific and can be used to speed up other text-to-image diffusion systems, as shown later.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Below, you can find some blog posts on similar topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch.org/blog/accelerated-diffusers-pt-20/&quot;&gt;Accelerated Diffusers with PyTorch 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://huggingface.co/blog/simple_sdxl_optimizations&quot;&gt;Exploring simple optimizations for SDXL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch.org/blog/accelerated-generative-diffusion-models/&quot;&gt;Accelerated Generative Diffusion Models with PyTorch 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;We will demonstrate the optimizations and their respective speed-up gains using the 🤗&lt;a href=&quot;https://github.com/huggingface/diffusers&quot;&gt;Diffusers library&lt;/a&gt;. Apart from that, we will make use of the following PyTorch-native libraries and environments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Torch nightly (to benefit from the fastest kernels for efficient attention; 2.3.0.dev20231218+cu121)&lt;/li&gt;
  &lt;li&gt;🤗 PEFT (version: 0.7.1)&lt;/li&gt;
  &lt;li&gt;torchao (commit SHA: 54bcd5a10d0abbe7b0c045052029257099f83fd9)&lt;/li&gt;
  &lt;li&gt;CUDA 12.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For an easier reproduction environment, you can also refer to this &lt;a href=&quot;https://github.com/huggingface/sdxl-fast/blob/main/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;. The benchmarking numbers presented in this post come from a 400W 80GB A100 GPU (with its clock rate set to its maximum capacity).&lt;/p&gt;

&lt;p&gt;Since we use an A100 GPU (Ampere architecture) here, we can specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.set_float32_matmul_precision(&quot;high&quot;)&lt;/code&gt; to benefit from the &lt;a href=&quot;https://blogs.nvidia.com/blog/tensorfloat-32-precision-format/&quot;&gt;TF32 precision format&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;run-inference-using-a-reduced-precision&quot;&gt;Run inference using a reduced precision&lt;/h2&gt;

&lt;p&gt;Running SDXL in Diffusers just takes a few lines of code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from diffusers import StableDiffusionXLPipeline

## Load the pipeline in full-precision and place its model components on CUDA.
pipe = StableDiffusionXLPipeline.from_pretrained(&quot;stabilityai/stable-diffusion-xl-base-1.0&quot;).to(&quot;cuda&quot;)

## Run the attention ops without efficiency.
pipe.unet.set_default_attn_processor()
pipe.vae.set_default_attn_processor()

prompt = &quot;Astronaut in a jungle, cold color palette, muted colors, detailed, 8k&quot;
image = pipe(prompt, num_inference_steps=30).images[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this isn’t very practical as it takes &lt;strong&gt;7.36 seconds&lt;/strong&gt; to generate a single image with 30 steps. This is our baseline which we will try to optimize one step at a time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg2.png&quot; alt=&quot;SDXL Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we’re running the pipeline with the full precision. We can immediately cut down the inference time by using a reduced precision such as &lt;a href=&quot;https://cloud.google.com/tpu/docs/bfloat16&quot;&gt;bfloat16&lt;/a&gt;. Besides, modern GPUs come with dedicated cores for running accelerated computation benefiting from reduced precision. To run the computations of the pipeline in the bfloat16 precision, we just need to specify the data type while initializing the pipeline:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from diffusers import StableDiffusionXLPipeline

pipe = StableDiffusionXLPipeline.from_pretrained(
	&quot;stabilityai/stable-diffusion-xl-base-1.0&quot;, torch_dtype=torch.bfloat16
).to(&quot;cuda&quot;)

## Run the attention ops without efficiency.
pipe.unet.set_default_attn_processor()
pipe.vae.set_default_attn_processor()
prompt = &quot;Astronaut in a jungle, cold color palette, muted colors, detailed, 8k&quot;
image = pipe(prompt, num_inference_steps=30).images[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg3.png&quot; alt=&quot;SDXL Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By using a reduced precision, we’re able to cut down the inference latency from &lt;strong&gt;7.36 seconds to 4.63 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some notes on the use of bfloat16&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using a reduced numerical precision (such as float16, bfloat16) to run inference doesn’t affect the generation quality but significantly improves latency.&lt;/li&gt;
  &lt;li&gt;The benefits of using the &lt;a href=&quot;https://cloud.google.com/tpu/docs/bfloat16&quot;&gt;bfloat16&lt;/a&gt; numerical precision as compared to float16 are hardware-dependent. Modern generations of GPUs tend to favor bfloat16.&lt;/li&gt;
  &lt;li&gt;Furthermore, in our experiments, we bfloat16 to be much more resilient when used with quantization in comparison to float16.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(We later ran the experiments in float16 and found out that the recent versions of torchao do not incur numerical problems from float16.)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-sdpa-for-performing-attention-computations&quot;&gt;Use SDPA for performing attention computations&lt;/h2&gt;

&lt;p&gt;By default, Diffusers uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaled_dot_product_attention&lt;/code&gt; (SDPA) for performing attention-related computations when using PyTorch 2. SDPA provides faster and more efficient kernels to run intensive attention-related operations. To run the pipeline SDPA, we simply don’t set any attention processor like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from diffusers import StableDiffusionXLPipeline

pipe = StableDiffusionXLPipeline.from_pretrained(
	&quot;stabilityai/stable-diffusion-xl-base-1.0&quot;, torch_dtype=torch.bfloat16
).to(&quot;cuda&quot;)

prompt = &quot;Astronaut in a jungle, cold color palette, muted colors, detailed, 8k&quot;
image = pipe(prompt, num_inference_steps=30).images[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SDPA gives a nice boost from &lt;strong&gt;4.63 seconds to 3.31 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg4.png&quot; alt=&quot;SDXL Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;compiling-the-unet-and-vae&quot;&gt;Compiling the UNet and VAE&lt;/h2&gt;

&lt;p&gt;We can ask PyTorch to perform some low-level optimizations (such as operator fusion and launching faster kernels with CUDA graphs) by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.compile&lt;/code&gt;. For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StableDiffusionXLPipeline&lt;/code&gt;, we compile the denoiser (UNet) and the VAE:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from diffusers import StableDiffusionXLPipeline
import torch

pipe = StableDiffusionXLPipeline.from_pretrained(
    &quot;stabilityai/stable-diffusion-xl-base-1.0&quot;, torch_dtype=torch.bfloat16
).to(&quot;cuda&quot;)

## Compile the UNet and VAE.
pipe.unet = torch.compile(pipe.unet, mode=&quot;max-autotune&quot;, fullgraph=True)
pipe.vae.decode = torch.compile(pipe.vae.decode, mode=&quot;max-autotune&quot;, fullgraph=True)

prompt = &quot;Astronaut in a jungle, cold color palette, muted colors, detailed, 8k&quot;

## First call to `pipe` will be slow, subsequent ones will be faster.
image = pipe(prompt, num_inference_steps=30).images[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using SDPA attention and compiling both the UNet and VAE reduces the latency from &lt;strong&gt;3.31 seconds to 2.54 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg5.png&quot; alt=&quot;SDXL Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes on &lt;code&gt;torch.compile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.compile&lt;/code&gt; offers different backends and modes. As we’re aiming for maximum inference speed, we opt for the inductor backend using the “max-autotune”. “max-autotune” uses CUDA graphs and optimizes the compilation graph specifically for latency. Using CUDA graphs greatly reduces the overhead of launching GPU operations. It saves time by using a mechanism to launch multiple GPU operations through a single CPU operation.&lt;/p&gt;

&lt;p&gt;Specifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullgraph&lt;/code&gt; to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; ensures that there are no graph breaks in the underlying model, ensuring the fullest potential of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.compile&lt;/code&gt;. In our case, the following compiler flags were also important to be explicitly set:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;torch._inductor.config.conv_1x1_as_mm = True
torch._inductor.config.coordinate_descent_tuning = True
torch._inductor.config.epilogue_fusion = False
torch._inductor.config.coordinate_descent_check_all_directions = True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the full list of compiler flags, refer to &lt;a href=&quot;https://github.com/pytorch/pytorch/blob/main/torch/_inductor/config.py&quot;&gt;this file.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also change the memory layout of the UNet and the VAE to “channels_last” when compiling them to ensure maximum speed:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipe.unet.to(memory_format=torch.channels_last)
pipe.vae.to(memory_format=torch.channels_last)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the next section, we’ll show how to improve the latency even further.&lt;/p&gt;

&lt;h2 id=&quot;additional-optimizations&quot;&gt;Additional optimizations&lt;/h2&gt;

&lt;h3 id=&quot;no-graph-breaks-during-torchcompile&quot;&gt;No graph breaks during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.compile&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Ensuring that the underlying model/method can be fully compiled is crucial for performance (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.compile&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullgraph=True&lt;/code&gt;). This means having no graph breaks. We did this for the UNet and VAE by changing how we access the returning variables. Consider the following example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg5b.jpg&quot; alt=&quot;code example&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting-rid-of-gpu-syncs-after-compilation&quot;&gt;Getting rid of GPU syncs after compilation&lt;/h3&gt;

&lt;p&gt;During the iterative reverse diffusion process, we &lt;a href=&quot;https://github.com/huggingface/diffusers/blob/1d686bac8146037e97f3fd8c56e4063230f71751/src/diffusers/pipelines/stable_diffusion_xl/pipeline_stable_diffusion_xl.py#L1228&quot;&gt;call&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step()&lt;/code&gt; on the scheduler each time after the denoiser predicts the less noisy latent embeddings. Inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step()&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigmas&lt;/code&gt; variable is &lt;a href=&quot;https://github.com/huggingface/diffusers/blob/1d686bac8146037e97f3fd8c56e4063230f71751/src/diffusers/schedulers/scheduling_euler_discrete.py#L476&quot;&gt;indexed&lt;/a&gt;. If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigmas&lt;/code&gt; array is placed on the GPU, indexing causes a communication sync between the CPU and GPU. This causes a latency, and it becomes more evident when the denoiser has already been compiled.&lt;/p&gt;

&lt;p&gt;But if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigmas &lt;/code&gt;array always stays on the CPU (refer to &lt;a href=&quot;https://github.com/huggingface/diffusers/blob/35a969d297cba69110d175ee79c59312b9f49e1e/src/diffusers/schedulers/scheduling_euler_discrete.py#L240&quot;&gt;this line&lt;/a&gt;), this sync doesn’t take place, hence improved latency. In general, any CPU &amp;lt;-&amp;gt; GPU communication sync should be none or be kept to a bare minimum as it can impact inference latency.&lt;/p&gt;

&lt;h3 id=&quot;using-combined-projections-for-attention-ops&quot;&gt;Using combined projections for attention ops&lt;/h3&gt;

&lt;p&gt;Both the UNet and the VAE used in SDXL make use of Transformer-like blocks. A Transformer block consists of attention blocks and feed-forward blocks.&lt;/p&gt;

&lt;p&gt;In an attention block, the input is projected into three sub-spaces using three different projection matrices – Q, K, and V. In the naive implementation, these projections are performed separately on the input. But we can horizontally combine the projection matrices into a single matrix and perform the projection in one shot. This increases the size of the matmuls of the input projections and improves the impact of quantization (to be discussed next).&lt;/p&gt;

&lt;p&gt;Enabling this kind of computation in Diffusers just takes a single line of code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipe.fuse_qkv_projections()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will make the attention operations for both the UNet and the VAE take advantage of the combined projections. For the cross-attention layers, we only combine the key and value matrices. To learn more, you can refer to the official documentation &lt;a href=&quot;https://huggingface.co/docs/diffusers/main/en/api/pipelines/stable_diffusion/stable_diffusion_xl#diffusers.StableDiffusionXLPipeline.fuse_qkv_projections&quot;&gt;here&lt;/a&gt;. It’s worth noting that we &lt;a href=&quot;https://github.com/huggingface/diffusers/blob/35a969d297cba69110d175ee79c59312b9f49e1e/src/diffusers/models/attention_processor.py#L1356&quot;&gt;leverage&lt;/a&gt; PyTorch’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaled_dot_product_attention&lt;/code&gt; here internally.&lt;/p&gt;

&lt;p&gt;These additional techniques improved the inference latency from &lt;strong&gt;2.54 seconds to 2.52 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg6.png&quot; alt=&quot;SDXL Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dynamic-int8-quantization&quot;&gt;Dynamic int8 quantization&lt;/h2&gt;

&lt;p&gt;We selectively apply &lt;a href=&quot;https://pytorch.org/tutorials/recipes/recipes/dynamic_quantization.html&quot;&gt;dynamic int8 quantization&lt;/a&gt; to both the UNet and the VAE. This is because quantization adds additional conversion overhead to the model that is hopefully made up for by faster matmuls (dynamic quantization). If the matmuls are too small, these techniques may degrade performance.&lt;/p&gt;

&lt;p&gt;Through experimentation, we found that certain linear layers in the UNet and the VAE don’t benefit from dynamic int8 quantization. You can check out the full code for filtering those layers &lt;a href=&quot;https://github.com/huggingface/diffusion-fast/blob/0f169640b1db106fe6a479f78c1ed3bfaeba3386/utils/pipeline_utils.py#L16&quot;&gt;here&lt;/a&gt; (referred to as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic_quant_filter_fn&lt;/code&gt; below).&lt;/p&gt;

&lt;p&gt;We leverage the ultra-lightweight pure PyTorch library &lt;a href=&quot;https://github.com/pytorch-labs/ao&quot;&gt;torchao&lt;/a&gt; to use its user-friendly APIs for quantization:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from torchao.quantization import apply_dynamic_quant

apply_dynamic_quant(pipe.unet, dynamic_quant_filter_fn)
apply_dynamic_quant(pipe.vae, dynamic_quant_filter_fn)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since this quantization support is limited to linear layers only, we also turn suitable pointwise convolution layers into linear layers to maximize the benefit. We also specify the following compiler flags when using this option:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;torch._inductor.config.force_fuse_int_mm_with_mul = True
torch._inductor.config.use_mixed_mm = True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To prevent any numerical issues stemming from quantization, we run everything in the bfloat16 format.&lt;/p&gt;

&lt;p&gt;Applying quantization this way improved the latency from &lt;strong&gt;2.52 seconds to 2.43 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg7.png&quot; alt=&quot;SDXL Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;We welcome you to check out the following codebases to reproduce these numbers and extend the techniques to other text-to-image diffusion systems as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/huggingface/diffusion-fast&quot;&gt;diffusion-fast&lt;/a&gt; (repository providing all the code to reproduce the numbers and plots above)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pytorch-labs/ao&quot;&gt;torchao library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/huggingface/diffusers&quot;&gt;Diffusers library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/huggingface/peft&quot;&gt;PEFT library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Other links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://huggingface.co/papers/2307.01952&quot;&gt;SDXL: Improving Latent Diffusion Models for High-Resolution Image Synthesis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://huggingface.co/docs/diffusers/main/en/tutorials/fast_diffusion&quot;&gt;Fast diffusion documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;improvements-in-other-pipelines&quot;&gt;Improvements in other pipelines&lt;/h2&gt;

&lt;p&gt;We applied these techniques to other pipelines to test the generality of our approach. Below are our findings:&lt;/p&gt;

&lt;h3 id=&quot;ssd-1b&quot;&gt;&lt;a href=&quot;https://huggingface.co/segmind/SSD-1B&quot;&gt;SSD-1B&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg8.png&quot; alt=&quot;SSD-1B Chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stable-diffusion-v1-5&quot;&gt;&lt;a href=&quot;https://huggingface.co/runwayml/stable-diffusion-v1-5&quot;&gt;Stable Diffusion v1-5&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg9.png&quot; alt=&quot;Stable Diffusion v1-5 chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pixart-alphapixart-xl-2-1024-ms&quot;&gt;&lt;a href=&quot;https://huggingface.co/PixArt-alpha/PixArt-XL-2-1024-MS&quot;&gt;PixArt-alpha/PixArt-XL-2-1024-MS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It’s worth noting that PixArt-Alpha uses a Transformer-based architecture as its denoiser for the reverse diffusion process instead of a UNet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-3/fg10.png&quot; alt=&quot;PixArt-alpha/PixArt-XL-2-1024-MS chart&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that for Stable Diffusion v1-5 and PixArt-Alpha, we didn’t explore the best shape combination criteria for applying dynamic int8 quantization. It might be possible to get better numbers with a better combination.&lt;/p&gt;

&lt;p&gt;Collectively, the methods we presented offer substantial speedup over the baseline without degradation in the generation quality. Furthermore, we believe that these methods should complement other optimization methods popular in the community (such as &lt;a href=&quot;https://github.com/horseee/DeepCache&quot;&gt;DeepCache&lt;/a&gt;, &lt;a href=&quot;https://github.com/chengzeyi/stable-fast&quot;&gt;Stable Fast&lt;/a&gt;, etc.).&lt;/p&gt;

&lt;h2 id=&quot;conclusion-and-next-steps&quot;&gt;Conclusion and next steps&lt;/h2&gt;

&lt;p&gt;In this post, we presented a basket of simple yet effective techniques that can help improve the inference latency of text-to-image Diffusion models in pure PyTorch. In summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using a reduced precision to perform our computations&lt;/li&gt;
  &lt;li&gt;Scaled-dot product attention for running the attention blocks efficiently&lt;/li&gt;
  &lt;li&gt;torch.compile with “max-autotune” to improve for latency&lt;/li&gt;
  &lt;li&gt;Combining the different projections together for computing attention&lt;/li&gt;
  &lt;li&gt;Dynamic int8 quantization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We believe there’s a lot to be explored in terms of how we apply quantization to a text-to-image diffusion system. We didn’t exhaustively explore which layers in the UNet and the VAE tend to benefit from dynamic quantization. There might be opportunities to further speed things up with a better combination of the layers being targeted for quantization.&lt;/p&gt;

&lt;p&gt;We kept the text encoders of SDXL untouched other than just running them in bfloat16. Optimizing them might also lead to improvements in latency.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://madebyoll.in/&quot;&gt;Ollin Boer Bohan&lt;/a&gt; whose &lt;a href=&quot;https://huggingface.co/madebyollin/sdxl-vae-fp16-fix&quot;&gt;VAE&lt;/a&gt; was used throughout the benchmarking process as it is numerically more stable under reduced numerical precisions.&lt;/p&gt;

&lt;p&gt;Thanks to Hugo Larcher from Hugging Face for helping with infrastructure.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Sayak Paul and Patrick von Platen (Hugging Face 🤗)</name>
        
        
      </author>

      

      

      
        <summary type="html">This post is the third part of a multi-series blog focused on how to accelerate generative AI models with pure, native PyTorch. We are excited to share a breadth of newly released PyTorch performance features alongside practical examples to see how far we can push PyTorch native performance. In part one, we showed how to accelerate Segment Anything over 8x using only pure, native PyTorch. In part two, we showed how to accelerate Llama-7B by almost 10x using only native PyTorch optimizations. In this blog, we’ll focus on speeding up text-to-image diffusion models by upto 3x.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Understanding GPU Memory 2: Finding and Removing Reference Cycles</title>
      <link href="https://pytorch.org/blog/understanding-gpu-memory-2/" rel="alternate" type="text/html" title="Understanding GPU Memory 2: Finding and Removing Reference Cycles" />
      <published>2023-12-19T00:00:00-08:00</published>
      <updated>2023-12-19T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/understanding-gpu-memory-2</id>
      <content type="html" xml:base="https://pytorch.org/blog/understanding-gpu-memory-2/">&lt;p&gt;This is part 2 of the Understanding GPU Memory blog series. Our first post &lt;a href=&quot;/blog/understanding-gpu-memory-1/&quot;&gt;Understanding GPU Memory 1: Visualizing All Allocations over Time&lt;/a&gt; shows how to use the  memory snapshot tool. In this part, we will use the Memory Snapshot to visualize a GPU memory leak caused by reference cycles, and then locate and remove them in our code using the Reference Cycle Detector.&lt;/p&gt;

&lt;p&gt;Sometimes when we were using the Memory Snapshot, we saw plots of GPU memory that looked similar to this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/memory_leak_oom.jpg&quot; alt=&quot;GPU memory&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this snapshot, each peak shows GPU tensors building up over time and then several tensors getting released at once. In addition, a CUDA OOM happens on the right side causing all the tensors to be released. Seeing the tensors accumulate like this is a &lt;strong&gt;clear indication of a problem, but it doesn’t immediately suggest why&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tensors-in-reference-cycles&quot;&gt;Tensors in Reference Cycles&lt;/h2&gt;

&lt;p&gt;During early debugging, we dug in further to find that this **pattern happens a lot when your Python code has objects with reference cycles. ** Python will clean up non-cyclic objects immediately using reference counting. However objects in reference cycles are only cleaned up later by a cycle collector. If these cycles refer to a GPU tensor, the GPU tensor will stay alive until that cycle collector runs and removes the reference cycle. Let’s take a look at a simplified example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/simple_reference_cycle.png&quot; alt=&quot;Simple reference cycle&quot; style=&quot;width:100%; max-width:400px; margin-right: auto; margin-left: auto; display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet behind the snapshot (full code in Appendix A):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    def leak(tensor_size, num_iter=100000, device=&quot;cuda:0&quot;):
      class Node:
        def __init__(self, T):
          self.tensor = T
          self.link = None

      for _ in range(num_iter):
        A = torch.zeros(tensor_size, device=device)
        B = torch.zeros(tensor_size, device=device)
        a, b = Node(A), Node(B)

        # A reference cycle will force refcounts to be non-zero.
        a.link, b.link = b, a
        # Python will eventually garbage collect a &amp;amp; b, but will
        # OOM on the GPU before that happens (since python
        # runtime doesn't know about CUDA memory usage).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this code example, the tensors A and B are created, where A has a link to B and vice versa. This forces a non-zero reference count when A and B go out of scope. When we run this for 100,000 iterations, we expect the automatic garbage collection to free the reference cycles when going out of scope. However, this will actually CUDA OOM.&lt;/p&gt;

&lt;h3 id=&quot;why-doesnt-automatic-garbage-collection-work&quot;&gt;Why doesn’t automatic garbage collection work?&lt;/h3&gt;

&lt;p&gt;The automatic garbage collection works well when there is a lot of extra memory as is common on CPUs because it amortizes the expensive garbage collection by using &lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)&quot;&gt;Generational Garbage Collection&lt;/a&gt;. But to amortize the collection work, it defers some memory cleanup making the maximum memory usage higher, which is less suited to memory constrained environments. The Python runtime also has no insights into CUDA memory usage, so it cannot be triggered on high memory pressure either. It’s even more challenging as GPU training is almost always memory constrained because we will often raise the batch size to use any additional free memory.&lt;/p&gt;

&lt;p&gt;The CPython’s garbage collection frees unreachable objects held in reference cycles via the &lt;strong&gt;mark-and-sweep&lt;/strong&gt;. The garbage collection is automatically run when the number of objects exceeds certain thresholds. There are &lt;strong&gt;3 generations of thresholds&lt;/strong&gt; to help amortize the expensive costs of running garbage collection on every object. The later generations are less frequently run. This would explain why automatic collections will only clear several tensors on each peak, however there are still tensors that leak resulting in the CUDA OOM. Those tensors were held by reference cycles in later generations.&lt;/p&gt;

&lt;h2 id=&quot;explicitly-calling-gccollect&quot;&gt;Explicitly calling gc.collect()&lt;/h2&gt;

&lt;p&gt;One way to fix this is by explicitly calling the garbage collector frequently. Here we can see that the GPU memory for tensors out of scope gets cleaned up when we explicitly call the garbage collector every 100 iterations. This also controls the maximum GPU peak memory held by leaking tensors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/memory_leak_gc_collect.jpg&quot; alt=&quot;memory leak&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although this works and fixes the CUDA OOM issue, calling gc.collect() too frequently can cause other issues including &lt;strong&gt;QPS regressions&lt;/strong&gt;. Therefore we cannot simply increase the frequency of garbage collection on every training job. &lt;strong&gt;It’s best to just avoid creating reference cycles in the first place&lt;/strong&gt;. More on this in section, Reference Cycle Detector.&lt;/p&gt;

&lt;h2 id=&quot;sneaky-memory-leak-in-callback&quot;&gt;Sneaky Memory Leak in Callback&lt;/h2&gt;

&lt;p&gt;Real examples are more complicated, so let’s look at a more realistic example that has a similar behavior. In this snapshot, we can observe the same behavior of tensors being accumulated and freed during automatic garbage collection, until we hit a CUDA OOM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/memory_leak_awaitable.jpg&quot; alt=&quot;memory leak&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet behind this snapshot (full code sample in Appendix A):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    class AwaitableTensor:
      def __init__(self, tensor_size):
        self._tensor_size = tensor_size
        self._tensor = None

      def wait(self):
        self._tensor = torch.zeros(self._tensor_size, device=&quot;cuda:0&quot;)
        return self._tensor

    class AwaitableTensorWithViewCallback:
      def __init__(self, tensor_awaitable, view_dim):
        self._tensor_awaitable = tensor_awaitable
        self._view_dim = view_dim
        # Add a view filter callback to the tensor.
        self._callback = lambda ret: ret.view(-1, self._view_dim)

      def wait(self):
        return self._callback(self._tensor_awaitable.wait())

    async def awaitable_leak(
      tensor_size=2**27, num_iter=100000,
    ):
      for _ in range(num_iter):
        A = AwaitableTensor(tensor_size)
        AwaitableTensorWithViewCallBack(A, 4).wait()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this code, we define two classes. The class AwaitableTensor will create a tensor when waited upon. Another class AwaitableTensorWithViewCallback will apply a view filter on the AwaitableTensor via callback lambda.&lt;/p&gt;

&lt;p&gt;When running awaitable_leak, which creates tensor A (512 MB) and applies a view filter for 100,000 iterations, we expect that A should be reclaimed each time it goes out of scope because the reference count should reach 0. However, this will actually OOM!&lt;/p&gt;

&lt;p&gt;While we know there is a reference cycle here, it isn’t clear from the code where the cycle is created. &lt;strong&gt;To help with these situations, we have created a tool to locate and report these cycles.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference-cycle-detector&quot;&gt;Reference Cycle Detector&lt;/h2&gt;

&lt;p&gt;Introducing the &lt;strong&gt;Reference Cycle Detector&lt;/strong&gt;, which helps us find reference cycles keeping GPU tensors alive. The API is fairly simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;During model initialization:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Import:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from torch.utils.viz._cycles import warn_tensor_cycles&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Start:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warn_tensor_cycles()&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Reference Cycle Detector will issue warnings every time that the cycle collector runs and finds a CUDA tensor that gets freed. The warning provides an &lt;strong&gt;object graph&lt;/strong&gt; showing how the reference cycle refers to the GPU tensor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/awaitable_leak_cycle.png&quot; alt=&quot;object graph&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance in this object graph, we can easily observe that there is a &lt;strong&gt;circular dependency on the outer circle of the graph&lt;/strong&gt;, and &lt;strong&gt;highlighted in red is the GPU tensor kept alive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Most cycles are pretty easy to fix once they are discovered. For instance here we can remove the reference to self created by self._view_dim in the callback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/awaitable_code_snippet.png&quot; alt=&quot;code snippet&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve spent some time fixing cycles in existing models using these tools. For example in TorchRec, we’ve found and removed a reference cycle in &lt;a href=&quot;https://github.com/pytorch/torchrec/pull/1226&quot;&gt;PR#1226&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/torchrec_code_snippet.png&quot; alt=&quot;code snippet&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve removed the reference cycles, the code will &lt;strong&gt;no longer issue a CUDA OOM nor show any memory leaks&lt;/strong&gt; in their snapshots.&lt;/p&gt;

&lt;h3 id=&quot;what-are-the-other-benefits-of-using-the-reference-cycle-detector&quot;&gt;What are the other benefits of using the Reference Cycle Detector?&lt;/h3&gt;

&lt;p&gt;Removing these cycles will also directly &lt;strong&gt;lower the maximum GPU memory usage&lt;/strong&gt; as well as make it &lt;strong&gt;less likely for memory to fragment&lt;/strong&gt; because the allocator returns to the same state after each iteration.&lt;/p&gt;

&lt;h2 id=&quot;where-can-i-find-these-tools&quot;&gt;Where can I find these tools?&lt;/h2&gt;

&lt;p&gt;We hope that the Reference Cycle Detector will greatly improve your ability to find and remove memory leaks caused by reference cycles. The Reference Cycle Detector is available in the v2.1 release of PyTorch as experimental features and More information about the Reference Cycle Detector can be found in the &lt;a href=&quot;https://pytorch.org/docs/main/torch_cuda_memory.html&quot;&gt;PyTorch Memory docs here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;We look forward to hearing from you about any enhancements, bugs or memory stories that our tools helped to solve! As always, please feel free to open new issues on PyTorch’s Github page.&lt;/p&gt;

&lt;p&gt;We are also open to contributions from the OSS community, feel free to tag &lt;a href=&quot;https://github.com/aaronenyeshi&quot;&gt;Aaron Shi&lt;/a&gt; and &lt;a href=&quot;https://github.com/zdevito&quot;&gt;Zachary DeVito&lt;/a&gt; in any Github PRs for reviews.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Really appreciate the content reviewers, &lt;a href=&quot;mailto:marksaroufim@meta.com&quot;&gt;Mark Saroufim&lt;/a&gt;, &lt;a href=&quot;mailto:gchanan@meta.com&quot;&gt;Gregory Chanan&lt;/a&gt;, and &lt;a href=&quot;mailto:adnanaziz@meta.com&quot;&gt;Adnan Aziz&lt;/a&gt; for reviewing this post and improving its readability.&lt;/p&gt;

&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;

&lt;h3 id=&quot;appendix-a---code-sample&quot;&gt;Appendix A - Code Sample&lt;/h3&gt;

&lt;p&gt;This code snippet was used to generate the plots and examples shown. Here are the arguments to reproduce the sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Introduction: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python sample.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Explicitly calling gc.collect(): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python sample.py --gc_collect_interval=100&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sneaky Memory Leak in Callback: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python sample.py --workload=awaitable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ref Cycle Detector: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python sample.py --workload=awaitable --warn_tensor_cycles&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;sample.py:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# (c) Meta Platforms, Inc. and affiliates. 
import argparse
import asyncio
import gc
import logging
import socket
from datetime import datetime, timedelta

import torch

logging.basicConfig(
   format=&quot;%(levelname)s:%(asctime)s %(message)s&quot;,
   level=logging.INFO,
   datefmt=&quot;%Y-%m-%d %H:%M:%S&quot;,
)
logger: logging.Logger = logging.getLogger(__name__)
logger.setLevel(level=logging.INFO)

TIME_FORMAT_STR: str = &quot;%b_%d_%H_%M_%S&quot;

# Keep a max of 100,000 alloc/free events in the recorded history
# leading up to the snapshot.
MAX_NUM_OF_MEM_EVENTS_PER_SNAPSHOT: int = 100000

def start_record_memory_history() -&amp;gt; None:
   if not torch.cuda.is_available():
       logger.info(&quot;CUDA unavailable. Not recording memory history&quot;)
       return

   logger.info(&quot;Starting snapshot record_memory_history&quot;)
   torch.cuda.memory._record_memory_history(
       max_entries=MAX_NUM_OF_MEM_EVENTS_PER_SNAPSHOT
   )

def stop_record_memory_history() -&amp;gt; None:
   if not torch.cuda.is_available():
       logger.info(&quot;CUDA unavailable. Not recording memory history&quot;)
       return

   logger.info(&quot;Stopping snapshot record_memory_history&quot;)
   torch.cuda.memory._record_memory_history(enabled=None)

def export_memory_snapshot() -&amp;gt; None:
   if not torch.cuda.is_available():
       logger.info(&quot;CUDA unavailable. Not exporting memory snapshot&quot;)
       return

   # Prefix for file names.
   host_name = socket.gethostname()
   timestamp = datetime.now().strftime(TIME_FORMAT_STR)
   file_prefix = f&quot;{host_name}_{timestamp}&quot;

   try:
       logger.info(f&quot;Saving snapshot to local file: {file_prefix}.pickle&quot;)
       torch.cuda.memory._dump_snapshot(f&quot;{file_prefix}.pickle&quot;)
   except Exception as e:
       logger.error(f&quot;Failed to capture memory snapshot {e}&quot;)
       return

# This function will leak tensors due to the reference cycles.
def simple_leak(tensor_size, gc_interval=None, num_iter=30000, device=&quot;cuda:0&quot;):
    class Node:
        def __init__(self, T):
            self.tensor = T
            self.link = None

    for i in range(num_iter):
        A = torch.zeros(tensor_size, device=device)
        B = torch.zeros(tensor_size, device=device)
        a, b = Node(A), Node(B)
        # A reference cycle will force refcounts to be non-zero, when
        # a and b go out of scope.
        a.link, b.link = b, a
        # Python will eventually gc a and b, but may OOM on the CUDA
        # device before that happens (since python runtime doesn't
        # know about CUDA memory usage).

        # Since implicit gc is not called frequently enough due to
        # generational gc, adding an explicit gc is necessary as Python
        # runtime does not know about CUDA memory pressure.
        # https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)
        if gc_interval and i % int(gc_interval) == 0:
            gc.collect()

async def awaitable_leak(
    tensor_size, gc_interval=None, num_iter=100000, device=&quot;cuda:0&quot;
):
    class AwaitableTensor:
        def __init__(self, tensor_size, device) -&amp;gt; None:
            self._tensor_size = tensor_size
            self._device = device
            self._tensor = None

        def wait(self) -&amp;gt; torch.Tensor:
            self._tensor = torch.zeros(self._tensor_size, device=self._device)
            return self._tensor

    class AwaitableTensorWithViewCallBack:
        def __init__(
            self,
            tensor_awaitable: AwaitableTensor,
            view_dim: int,
        ) -&amp;gt; None:
            self._tensor_awaitable = tensor_awaitable
            self._view_dim = view_dim
            # Add a view filter callback to the tensor.
            self._callback = lambda ret: ret.view(-1, self._view_dim)

        def wait(self) -&amp;gt; torch.Tensor:
            return self._callback(self._tensor_awaitable.wait())

    for i in range(num_iter):
        # Create an awaitable tensor
        a_tensor = AwaitableTensor(tensor_size, device)

        # Apply a view filter callback on the awaitable tensor.
        AwaitableTensorWithViewCallBack(a_tensor, 4).wait()

        # a_tensor will go out of scope.

        if gc_interval and i % int(gc_interval) == 0:
            gc.collect()

if __name__ == &quot;__main__&quot;:
    parser = argparse.ArgumentParser(description=&quot;A memory_leak binary instance&quot;)
    parser.add_argument(
        &quot;--gc_collect_interval&quot;,
        default=None,
        help=&quot;Explicitly call GC every given interval. Default is off.&quot;,
    )
    parser.add_argument(
        &quot;--workload&quot;,
        default=&quot;simple&quot;,
        help=&quot;Toggle which memory leak workload to run. Options are simple, awaitable.&quot;,
    )
    parser.add_argument(
        &quot;--warn_tensor_cycles&quot;,
        action=&quot;store_true&quot;,
        default=False,
        help=&quot;Toggle whether to enable reference cycle detector.&quot;,
    )
    args = parser.parse_args()

    if args.warn_tensor_cycles:
        from tempfile import NamedTemporaryFile

        from torch.utils.viz._cycles import observe_tensor_cycles

        logger.info(&quot;Enabling warning for Python reference cycles for CUDA Tensors.&quot;)

        def write_and_log(html):
            with NamedTemporaryFile(&quot;w&quot;, suffix=&quot;.html&quot;, delete=False) as f:
                f.write(html)
                logger.warning(
                    &quot;Reference cycle includes a CUDA Tensor see visualization of cycle %s&quot;,
                    f.name,
                )

        observe_tensor_cycles(write_and_log)
    else:
        # Start recording memory snapshot history
        start_record_memory_history()

    # Run the workload with a larger tensor size.
    # For smaller sizes, we will not CUDA OOM as gc will kick in often enough
    # to reclaim reference cycles before an OOM occurs.
    size = 2**26  # 256 MB
    try:
        if args.workload == &quot;awaitable&quot;:
            size *= 2
            logger.info(f&quot;Running tensor_size: {size*4/1024/1024} MB&quot;)
            asyncio.run(
                awaitable_leak(tensor_size=size, gc_interval=args.gc_collect_interval)
            )
        elif args.workload == &quot;simple&quot;:
            logger.info(f&quot;Running tensor_size: {size*4/1024/1024} MB&quot;)
            simple_leak(tensor_size=size, gc_interval=args.gc_collect_interval)
        else:
            raise Exception(&quot;Unknown workload.&quot;)
    except Exception:
        logger.exception(f&quot;Failed to allocate {size*4/1024/1024} MB&quot;)

    # Create the memory snapshot file
    export_memory_snapshot()

    # Stop recording memory snapshot history
    stop_record_memory_history()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>Aaron Shi, Zachary DeVito</name>
        
        
      </author>

      

      

      
        <summary type="html">This is part 2 of the Understanding GPU Memory blog series. Our first post Understanding GPU Memory 1: Visualizing All Allocations over Time shows how to use the memory snapshot tool. In this part, we will use the Memory Snapshot to visualize a GPU memory leak caused by reference cycles, and then locate and remove them in our code using the Reference Cycle Detector.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Training Production AI Models with PyTorch 2.0</title>
      <link href="https://pytorch.org/blog/training-production-ai-models/" rel="alternate" type="text/html" title="Training Production AI Models with PyTorch 2.0" />
      <published>2023-12-18T00:00:00-08:00</published>
      <updated>2023-12-18T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/training-production-ai-models</id>
      <content type="html" xml:base="https://pytorch.org/blog/training-production-ai-models/">&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pytorch.org/get-started/pytorch-2.0/&quot;&gt;PyTorch 2.0&lt;/a&gt; (abbreviated as PT2) can significantly improve the training and inference performance of an AI model using a compiler called &lt;em&gt;torch.compile&lt;/em&gt; while being 100% backward compatible with PyTorch 1.x. There have been reports on how PT2 improves the performance of common &lt;em&gt;benchmarks&lt;/em&gt; (e.g., &lt;a href=&quot;https://huggingface.co/docs/diffusers/optimization/torch2.0&quot;&gt;huggingface’s diffusers&lt;/a&gt;). In this blog, we discuss our experiences in applying PT2 to &lt;em&gt;production&lt;/em&gt; AI models at Meta.&lt;/p&gt;

&lt;h2 id=&quot;2-background&quot;&gt;2. Background&lt;/h2&gt;

&lt;h3 id=&quot;21-why-is-automatic-performance-optimization-important-for-production&quot;&gt;2.1 Why is automatic performance optimization important for production?&lt;/h3&gt;

&lt;p&gt;Performance is particularly important for production—e.g, even a 5% reduction in the training time of a heavily used model can translate to substantial savings in GPU cost and data-center &lt;em&gt;power&lt;/em&gt;. Another important metric is &lt;em&gt;development efficiency&lt;/em&gt;, which measures how many engineer-months are required to bring a model to production. Typically, a significant part of this bring-up effort is spent on &lt;em&gt;manual&lt;/em&gt; performance tuning such as rewriting GPU kernels to improve the training speed. By providing &lt;em&gt;automatic&lt;/em&gt; performance optimization, PT2 can improve &lt;em&gt;both&lt;/em&gt; cost and development efficiency.&lt;/p&gt;

&lt;h3 id=&quot;22-how-pt2-improves-performance&quot;&gt;2.2 How PT2 improves performance&lt;/h3&gt;

&lt;p&gt;As a compiler, PT2 can view &lt;em&gt;multiple&lt;/em&gt; operations in the training graph captured from a model (unlike in PT1.x, where only one operation is executed at a time). Consequently, PT2 can exploit a number of performance optimization opportunities, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fusing multiple operations into a single GPU kernel:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A typical type of performance overhead in running a GPU program is the CPU overhead of launching small GPU kernels. By fusing multiple operations into a single GPU kernel, PT2 can significantly reduce the kernel-launching overhead on the CPU. For instance, consider the PyTorch program in Figure 1(a). When it is executed on GPU with PT1, it has three GPU kernels (two for the two sin() ops and one for the addition op). With PT2, there is only one kernel generated, which fuses all three ops.&lt;/li&gt;
      &lt;li&gt;After fusing some operations, certain operations in the graph may become dead and hence can be optimized away. This can save both compute and memory bandwidth on the GPU. For instance, in Figure 1(b), one of the duplicated sin() ops can be optimized away.&lt;/li&gt;
      &lt;li&gt;In addition, fusion can also reduce GPU device memory reads/writes (by composing pointwise kernels) and help improve hardware utilization.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig1.jpg&quot; alt=&quot;Fig.1  How PT2 improves performance with fusion and dead-code elimination.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;: How PT2 improves performance with fusion and dead-code elimination.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reducing the type conversion overhead for using lower-precision data types:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;PyTorch 1.x supports &lt;a href=&quot;https://pytorch.org/tutorials/recipes/recipes/amp_recipe.html&quot;&gt;Automatic Mixed Precision (AMP)&lt;/a&gt;.  While AMP can reduce the compute time of an op, it introduces type conversion overhead before and after the op. PT2 can increase AMP performance by optimizing away unnecessary type conversion code, significantly reducing its overhead. As an example, Figure 2(a) converts three 32-bit input tensors (a32, b32, c32) to bf16 before doing the matrix multiplications. Nevertheless, in this example, a32 and c32 are actually the same tensor (a_float32). So, there is no need to convert a_float32 twice, as shown in the code generated by torch.compile in Figure 2(b). Note that while both this example and the previous one optimize away redundant computations, they are different in the sense that the type conversion code in this example is &lt;em&gt;implicit&lt;/em&gt; via torch.autocast, unlike in the previous example where the torch.sin(x).cuda() is &lt;em&gt;explicit&lt;/em&gt; in user code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig2.jpg&quot; alt=&quot;Fig.2  How PT2 reduces type conversion overhead when using AMP.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 2&lt;/strong&gt;: How PT2 reduces type conversion overhead when using AMP.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reusing buffers on the GPU:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;With a global view, the scheduler in torch.compile can reuse buffers on the GPU, thereby reducing both memory allocation time and memory consumption. Figure 3 shows the driver program that calls the Triton kernels generated for the program in Figure 2(a). We can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf1&lt;/code&gt; is reused as&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; buf4&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig3.jpg&quot; alt=&quot;Fig.3  Reuse of buffers.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;: Reuse of buffers.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Autotuning:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;PT2 has options to enable autotuning (via Triton) on matrix-multiply ops, pointwise ops, and reduction ops. Tunable parameters include block size, number of stages, and number of warps. With autotuning, the most performant implementation of an op can be found empirically.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-production-environment-considerations&quot;&gt;3. Production environment considerations&lt;/h2&gt;

&lt;p&gt;In this section, we describe a number of important considerations in applying PT2 to production.&lt;/p&gt;

&lt;h3 id=&quot;31--ensuring-no-model-quality-degradation-with-torchcompile&quot;&gt;3.1  Ensuring no model quality degradation with torch.compile&lt;/h3&gt;

&lt;p&gt;Applying torch.compile to a model will cause numerical changes because of (1) reordering of floating-point ops during various optimizations such as fusion and (2) use of lower precision data types like bf16 if AMP is enabled.  Therefore 100% bitwise compatibility with PT 1.x is not expected. Nevertheless, we still need to make sure that the model quality (measured in some form of numeric scores) is preserved after applying torch.compile.  Typically, each production model will have its own range of acceptable scores (e.g., percentage change must be within 0.01%).&lt;/p&gt;

&lt;p&gt;In case of a model-quality drop caused by torch.compile, we need to do a deep-dive debug.&lt;/p&gt;

&lt;p&gt;One useful technique for debugging a torch.compile-related numeric issue is to apply torch.compile with different backends, in particular “eager” and “aot_eager”, in addition to “inductor”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the numeric issue happens with the “eager” backend, then the forward graph constructed by torch.compile is likely incorrect;&lt;/li&gt;
  &lt;li&gt;If the numeric issue doesn’t happen with “eager” but happens with “aot_eager”, then the backward graph constructed by torch.compile is likely incorrect;&lt;/li&gt;
  &lt;li&gt;If the numeric issue doesn’t happen with either “eager” or “aot_eager” but happens with “inductor”, then the code generation inside the inductor is likely incorrect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-autotuning-in-production&quot;&gt;3.2 Autotuning in production&lt;/h3&gt;

&lt;p&gt;By default, the autotuning in torch.inductor is done &lt;em&gt;online&lt;/em&gt; while the model is executed. For some production models, we find that the autotuning time can take several hours, which is not acceptable for production. Therefore, we add &lt;em&gt;offline autotuning&lt;/em&gt; which works as depicted in Figure 4. The very first time that a model is run, the details (e.g., input tensor shape, data type etc) on all ops that require tuning will be logged to a database. Then, a tuning process for these ops is run overnight to search for the most performant implementation of each op;  the search result is updated to a persistent cache (implemented as a source file of torch.inductor). Next time when the model is run again, the tuned implementation of each op will be found in the cache and chosen for execution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig4.jpg&quot; alt=&quot;Fig.4  The offline autotuning used in production.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;: The offline autotuning used in production.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-profiling-support-for-torchcompile&quot;&gt;3.3 Profiling support for torch.compile&lt;/h3&gt;

&lt;p&gt;As we previously discussed in this &lt;a href=&quot;https://pytorch.org/blog/performance-deb&quot;&gt;blog&lt;/a&gt;, a profiler is essential for debugging the performance of production models. We have enhanced the profiler to display torch.compile related events on the timeline. The most useful ones are marking which parts of the model are running compiled code so that we can quickly validate if the parts of the model that are supposed to be compiled are actually compiled by torch.compile. For example, the trace in Figure 5 has two compiled regions (with the label “CompiledFunction”). Other useful events are time spent on the compilation and that spent on accessing the compiler’s code-cache.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig5.jpg&quot; alt=&quot;Fig.5  A trace with two compiled regions.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 5&lt;/strong&gt;: A trace with two compiled regions.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;34-controlling-just-in-time-compilation-time&quot;&gt;3.4 Controlling just-in-time compilation time&lt;/h3&gt;

&lt;p&gt;torch.compile uses just-in-time compilation. The compilation happens when the first batch of data is trained. In our production setting, there is an upper limit on how much time is allowed for a training job to reach its first batch, aka &lt;em&gt;Time-To-First-Batch (TTFB)&lt;/em&gt;.  We need to make sure that enabling torch.compile will not increase TTFB to over the limit. This could be challenging because production models are large and~~ ~~torch.compile can take substantial compilation time. We enable &lt;em&gt;parallel compilation&lt;/em&gt; to keep the compile time under control (this is controlled by the global variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compile_threads&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch/_inductor/config.py&lt;/code&gt;, which is already set to the CPU count on OSS Linux). A model is decomposed into one or more computational graphs; each graph is decomposed into multiple Triton kernels. If parallel compilation is enabled, all the Triton kernels in the same graph can be compiled simultaneously (nevertheless, kernels from different graphs are still compiled in serial). Figure 6 illustrates how parallel compilation helps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig6.jpg&quot; alt=&quot;Fig.6  Using parallel compilation in production.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 6&lt;/strong&gt;: Using parallel compilation in production.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-results&quot;&gt;4. Results&lt;/h2&gt;

&lt;p&gt;In this section, we use three production models to evaluate PT2. First we show the training time speedups with PT2, using different optimization configs. Second, we show the importance of parallel compilation on the compilation time.&lt;/p&gt;

&lt;h3 id=&quot;41-training-time-speedup-with-torchcompile&quot;&gt;4.1 Training-time speedup with torch.compile&lt;/h3&gt;

&lt;p&gt;Figure 7 reports the training-time speedup with PT2. For each model, we show four cases: (i) no-compile with bf16, (ii) compile with fp32, (iii) compile with bf16, (iv) compile with bf16 and autotuning. The y-axis is the speedup over the baseline, which is no-compile with fp32.  Note that no-compile with bf16 is actually slower than no-compile with fp32, due to the type conversion overhead. In contrast, compiling with bf16 achieves much larger speedups by reducing much of this overhead. Overall, given that these models are already heavily optimized by hand, we are excited to see that torch.compile can still provide 1.14-1.24x speedup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig7.jpg&quot; alt=&quot;Fig.7 Training-time speedup with torch.compile (note: the baseline, no-compile/fp32, is  omitted in this figure).&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 7&lt;/strong&gt;: Training-time speedup with torch.compile (note: the baseline, no-compile/fp32, is omitted in this figure).&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;42-compilation-time-reduction-with-parallel-compilation&quot;&gt;4.2 Compilation-time reduction with parallel compilation&lt;/h3&gt;

&lt;p&gt;Figure 8 shows the compilation time with and without parallel compilation. While there is still room for improvement on the serial compilation time, parallel compilation has reduced the compilation overhead on TTFB to an acceptable level. Models B and C benefit more from parallel compilation than Model A does because they have more distinct Triton kernels per graph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/training-production-ai-models/blog-fig8.jpg&quot; alt=&quot;Fig.8 PT2 compilation time.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 8&lt;/strong&gt;: PT2 compilation time.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-concluding-remarks&quot;&gt;5. Concluding Remarks&lt;/h2&gt;

&lt;p&gt;In this blog, we demonstrate that PT2 can significantly accelerate the training of large and complex production AI models with reasonable compilation time. In our next blog, we will discuss how PT2 can do general graph transformations.&lt;/p&gt;

&lt;h2 id=&quot;6-acknowledgements&quot;&gt;6. Acknowledgements&lt;/h2&gt;

&lt;p&gt;Many thanks to &lt;a href=&quot;mailto:marksaroufim@meta.com&quot;&gt;Mark Saroufim&lt;/a&gt;, &lt;a href=&quot;mailto:adnanaziz@fb.com&quot;&gt;Adnan Aziz&lt;/a&gt;, and &lt;a href=&quot;mailto:gchanan@meta.com&quot;&gt;Gregory Chanan&lt;/a&gt; for their detailed and insightful reviews.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CK Luk, Daohang Shi, Yuzhen Huang, Jackie (Jiaqi) Xu, Jade Nie, Zhou Wang, Lu Fang, Flavio Sales Truzzi, Devashish Shankar, Dima Ivashchenko, Chunzhi Yang, Nicolas Macchioni, David Berard, Yu Guo, Xiaodong Wang, Bert Maher, Yanbo Liang, Edward Yang, Brian Hirsh, Michael Voznesensky, Animesh Jain, Michael Anderson</name>
        
        
      </author>

      

      

      
        <summary type="html">1. Introduction</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Empowering Models with Performance: The Art of Generalized Model Transformation Approach</title>
      <link href="https://pytorch.org/blog/empowering-models-performance/" rel="alternate" type="text/html" title="Empowering Models with Performance: The Art of Generalized Model Transformation Approach" />
      <published>2023-12-15T00:00:00-08:00</published>
      <updated>2023-12-15T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/empowering-models-performance</id>
      <content type="html" xml:base="https://pytorch.org/blog/empowering-models-performance/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pytorch.org/get-started/pytorch-2.0/&quot;&gt;PyTorch 2.0&lt;/a&gt; (PT2) offers a compiled execution mode which rewrites Python bytecode to extract sequences of PyTorch operations, translating them into a Graph IR. The IR is then just-in-time compiled through a customizable back end, improving training performance without user interference. Often, production models may go through multiple stages of optimization/lowering to hit performance targets. Therefore, having a compiled mode is desirable as it can separate the work of improving model performance from direct modification of the PyTorch model implementation. Thus, the compiled mode becomes more important, enabling Pytorch users to enhance model performance without modifying the PyTorch code implementation. This feature is particularly valuable for optimizing complex models, including large-scale and production-ready ones.&lt;/p&gt;

&lt;p&gt;In our previous &lt;a href=&quot;https://pytorch.org/blog/optimizing-production-pytorch-performance-with-graph-transformations/&quot;&gt;blog post&lt;/a&gt; , we outlined how heuristic model transformation rules are employed to optimize intricate production models. While these rules enabled substantial performance gains for some pilot models, they lacked universal adaptability; they don’t consistently perform well across different models or sometimes even within different sections of a single model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/empowering-models-performance/fig1.jpg&quot; alt=&quot;Fig.1 PT1 Graph mode vs PT2 Compile mode.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 1&lt;/strong&gt;: PT1 Graph mode vs PT2 Compile mode.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;In this blog post, we propose a more generalized model transformation solution, serving as a plugin to the PT2 compiler as shown in Fig.1 which is more general, performant and user-friendly, bringing performance improvements to both model training and inference without manual efforts. As illustrated in Fig.2, by incorporating the previously user-defined transformations into the compiler, we have streamlined the production stack. These changes bring advantages to a broader range of PyTorch models, extending beyond just Meta models,  which has already been incorporated in PT2 and is ready for use to benefit all Pytorch models.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/empowering-models-performance/fig2.jpg&quot; alt=&quot;Fig.2 Simplified stack with PT2 compile mode.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 2&lt;/strong&gt;: Simplified stack with PT2 compile mode.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;guiding-principle-atomic-rules&quot;&gt;Guiding Principle: Atomic Rules&lt;/h2&gt;

&lt;p&gt;Traditionally, people might use predefined heuristic rules to replace a model subgraph with another more performant subgraph toreduce launch overhead, minimize memory bw, and fully occupy SMs. However, this approach doesn’t scale well as it is hard to craft a set of rules that fits all models perfectly.&lt;/p&gt;

&lt;p&gt;Instead of grappling with bulky, complex rules, we can actually break them down into smaller, more digestible pieces – what we call ‘&lt;strong&gt;atomic rules&lt;/strong&gt;’. These tiny powerhouses of efficiency target the transformation of individual operators, to conduct one step of the fusion/transformation. This makes them easy to handle and apply, offering a straightforward path to optimizing models. So, with these atomic rules in hand, optimizing any model for top-tier performance becomes a breeze!&lt;/p&gt;

&lt;p&gt;We will walk through some simple examples to demonstrate how we use a chain of atomic rules to replace complicated heuristic rules.&lt;/p&gt;

&lt;h3 id=&quot;case-1-horizontal-fusion-of-computation-chains-started-with-accesses-to-embedding-tables&quot;&gt;Case 1: Horizontal fusion of computation chains started with accesses to embedding tables&lt;/h3&gt;

&lt;p&gt;Horizontal fusion means fusing parallel operators into one so as to reduce the number of kernels to be launched and improve performance. In our previous blog (&lt;a href=&quot;https://pytorch.org/blog/optimizing-production-pytorch-performance-with-graph-transformations/#32-horizontal-fusion-of-computation-chains-started-with-accesses-to-embedding-tables&quot;&gt;Section 3.2&lt;/a&gt;), we described model transformations that fused layernorm and activation functions after embedding bags, as shown in the figure provided. However, this method, had limitations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It only worked with layernorm and activation functions after embedding.&lt;/li&gt;
  &lt;li&gt;It was restricted to models with specific architecture rules, causing various issues in our production stack, including parameter changes and inference disruptions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To improve, we can use three atomic rules as shown in Fig.3 to replace the complicated heuristic rule:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fuse layernorms that follow the same split nodes horizontally.&lt;/li&gt;
  &lt;li&gt;Then, fuse tanh functions following the same split nodes horizontally.&lt;/li&gt;
  &lt;li&gt;Lastly, fuse vertical split-cat nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These atomic rules offer a clean and streamlined way for model simplification and optimization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/empowering-models-performance/fig3.jpg&quot; alt=&quot;Fig.3 Before, we optimized the model in one go by replacing subgraphs. Now, with atomic rules, we optimize step-by-step, covering more cases.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 3&lt;/strong&gt;: Before, we optimized the model in one go by replacing subgraphs. Now, with atomic rules, we optimize step-by-step, covering more cases.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;case-2-fuse-horizontal-mlp&quot;&gt;Case 2: Fuse horizontal MLP&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multilayer_perceptron&quot;&gt;MLP&lt;/a&gt;s (Multilayer Perceptrons) are fundamental components of deep neural networks, often consisting of linear, normalization, and activation functions. In complex models, there’s often a need to fuse many horizontal MLPs. Traditional methods find and replace parallel MLPs with a fused module as shown in Fig.4,  but this isn’t always straightforward. Some models might not have normalization, or they might use different activation functions, making it hard to apply a one-size-fits-all rule.&lt;/p&gt;

&lt;p&gt;This is where our atomic rules come in handy. These simplified rules target individual operators one at a time, making the process easier and more manageable. We use the following atomic rules for horizontal MLP fusion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fusing horizontal linear operators&lt;/li&gt;
  &lt;li&gt;Fusing horizontal layernorms.&lt;/li&gt;
  &lt;li&gt;Fusing horizontal activation functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/empowering-models-performance/fig4.jpg&quot; alt=&quot;Fig.4 Pseudocode for fusing MLP. Traditional optimizations need manual Python code changes.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 4&lt;/strong&gt;: Pseudocode for fusing MLP. Traditional optimizations need manual Python code changes.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The beauty of these rules is that they’re not limited to one case. They can be applied broadly. Since PyTorch models are built with torch operators, focusing on a smaller set of operators simplifies the process. This approach is not only more manageable but also more general compared to writing a specific large pattern replacement rule, making it easier to optimize various models efficiently.&lt;/p&gt;

&lt;h2 id=&quot;compile-time-graph-search&quot;&gt;Compile-time Graph Search&lt;/h2&gt;

&lt;p&gt;Our principle is to use chained atomic rules to replace heuristic rules. While this approach covers a wider range of cases, it does entail a longer time for graph search and pattern matching. The next question is: how can we minimize compilation time while performing compile-time graph searches efficiently?&lt;/p&gt;

&lt;p&gt;We design a two-step greedy algorithm as illustrated in Fig. 5. The first step in this process is to identify the target nodes, which we follow certain rules, e.g., identifying all linear operations with the same input shapes. Once identified, we use a Breadth-First Search (BFS) strategy to separate these nodes into different sets, so that nodes within a set don’t have data dependency. The nodes within each of these sets are independent and can be fused horizontally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/empowering-models-performance/fig5.jpg&quot; alt=&quot;Fig.5 Process of model transformation with graph IR.&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;line-height: 1.05&quot;&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;Fig. 5&lt;/strong&gt;: Process of model transformation with graph IR.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;With our approach, the search time is roughly 60 seconds for one of our largest internal models, which is manageable for on-the-fly tasks.&lt;/p&gt;

&lt;h2 id=&quot;in-the-end&quot;&gt;In the End&lt;/h2&gt;

&lt;p&gt;In our tests with internal ranking models, we observed approximately 5% to 15% training performance improvement across five models on top of the performance gain brought by torch.compile. We have enabled the optimization in PT2 compiler stack and landed it as default when users choose Inductor as the backend (&lt;a href=&quot;https://github.com/pytorch/pytorch/blob/53acdb66f7ed31919cf69cf62e6ee0f13287be7e/torch/_inductor/config.py#L90&quot;&gt;config&lt;/a&gt;). We expect our generalized transformation approach could benefit models beyond Meta, and look forward to more discussion and improvement through this compiler level transformation framework.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Many thanks to  Mark Saroufim, Gregory Chanan, Adnan Aziz, and Rocky Liu for their detailed and insightful reviews.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Jackie (Jiaqi) Xu, Yanbo Liang, Jason Ansel, Chunzhi Yang, Jade Nie, Yuzhen Huang, CK Luk, Xiaodong Wang, Lu Fang, Menglu Yu, Jinwon Lee, Daohang Shi, Flavio Sales Truzzi</name>
        
        
      </author>

      

      

      
        <summary type="html">Introduction</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Understanding GPU Memory 1: Visualizing All Allocations over Time</title>
      <link href="https://pytorch.org/blog/understanding-gpu-memory-1/" rel="alternate" type="text/html" title="Understanding GPU Memory 1: Visualizing All Allocations over Time" />
      <published>2023-12-14T00:00:00-08:00</published>
      <updated>2023-12-14T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/understanding-gpu-memory-1</id>
      <content type="html" xml:base="https://pytorch.org/blog/understanding-gpu-memory-1/">&lt;p&gt;During your time with PyTorch on GPUs, you may be familiar with this common error message:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 512.00 MiB. GPU 0 has a total capacity of 79.32 GiB of which 401.56 MiB is free.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this series, we show how to use memory tooling, including the Memory Snapshot, the Memory Profiler, and the Reference Cycle Detector to debug out of memory errors and improve memory usage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/fig1.png&quot; alt=&quot;Memory Timeline&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Memory Snapshot&lt;/strong&gt; tool provides a fine-grained GPU memory visualization for debugging GPU OOMs. Captured memory snapshots will show memory events including allocations, frees and OOMs, along with their stack traces.&lt;/p&gt;

&lt;p&gt;In a snapshot, each tensor’s memory allocation is color coded separately. The x axis is over time, and the y axis is the amount of GPU memory in MB. The snapshot is interactive, so we can observe the stack trace for any allocation by mousing over. Try it yourself at &lt;a href=&quot;https://github.com/pytorch/pytorch.github.io/blob/site/assets/images/understanding-gpu-memory-1/snapshot.html&quot;&gt;https://github.com/pytorch/pytorch.github.io/blob/site/assets/images/understanding-gpu-memory-1/snapshot.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this snapshot, there are 3 peaks showing the memory allocations over 3 training iterations (this is configerable). When looking at the peaks, it is &lt;strong&gt;easy to see the rise of memory in the forward&lt;/strong&gt; &lt;strong&gt;pass&lt;/strong&gt; and the &lt;strong&gt;fall during the backward pass&lt;/strong&gt; as the gradients are computed. It is also possible to see that the program has the &lt;strong&gt;same pattern of memory use iteration to iteration&lt;/strong&gt;. One thing that stands out is the many &lt;strong&gt;tiny spikes in memory&lt;/strong&gt;, by mousing over them, we see that they are buffers used temporarily by convolution operators.&lt;/p&gt;

&lt;h3 id=&quot;capturing-memory-snapshots&quot;&gt;Capturing Memory Snapshots&lt;/h3&gt;

&lt;p&gt;The API to capture memory snapshots is fairly simple and available in torch.cuda.memory:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Start:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.cuda.memory._record_memory_history(max_entries=100000)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Save:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.cuda.memory._dump_snapshot(file_name)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stop:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.cuda.memory._record_memory_history(enabled=None)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet&lt;/strong&gt; (for full code sample, see &lt;strong&gt;Appendix A&lt;/strong&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   # Start recording memory snapshot history, initialized with a buffer
   # capacity of 100,000 memory events, via the `max_entries` field.
   torch.cuda.memory._record_memory_history(
       max_entries=MAX_NUM_OF_MEM_EVENTS_PER_SNAPSHOT
   )

   # Run your PyTorch Model.
   # At any point in time, save a snapshot to file for later.
   for _ in range(5):
       pred = model(inputs)
       loss_fn(pred, labels).backward()
       optimizer.step()
       optimizer.zero_grad(set_to_none=True)

   # In this sample, we save the snapshot after running 5 iterations.
   #   - Save as many snapshots as you'd like.
   #   - Snapshots will save last `max_entries` number of memory events
   #     (100,000 in this example).
   try:
       torch.cuda.memory._dump_snapshot(f&quot;{file_prefix}.pickle&quot;)
   except Exception as e:
       logger.error(f&quot;Failed to capture memory snapshot {e}&quot;)

   # Stop recording memory snapshot history.
   torch.cuda.memory._record_memory_history(enabled=None)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To visualize the snapshot file, we have a tool hosted at &lt;a href=&quot;https://pytorch.org/memory_viz&quot;&gt;https://pytorch.org/memory_viz&lt;/a&gt;. There, you can drag and drop your saved snapshot file and it will plot each allocation over time. &lt;strong&gt;Privacy Note:&lt;/strong&gt; The tool will not save your snapshot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/fig2.png&quot; alt=&quot;Memory Timeline&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can generate an HTML from a .pickle by using the script at pytorch/torch/cuda/_memory_viz.py, here is an example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python torch/cuda/_memory_viz.py trace_plot snapshot.pickle -o snapshot.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;debugging-cuda-ooms&quot;&gt;Debugging CUDA OOMs&lt;/h2&gt;

&lt;p&gt;Let’s look at how we can use the memory snapshot tool to answer:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Why did a &lt;strong&gt;CUDA OOM&lt;/strong&gt; happen?&lt;/li&gt;
  &lt;li&gt;Where is the &lt;strong&gt;GPU Memory being used&lt;/strong&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;resnet50-with-a-bug&quot;&gt;ResNet50 with a bug&lt;/h3&gt;

&lt;p&gt;We’ve taken a look at a properly working model in the first snapshot. Now, let’s take a look at a training example with a bug, see snapshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/fig3.png&quot; alt=&quot;Memory Timeline&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the &lt;strong&gt;second iteration uses far more memory&lt;/strong&gt; than the first iteration. If this model were much larger, it could have &lt;strong&gt;CUDA OOM’d in the second iteration&lt;/strong&gt; without much more insight into why.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/fig4.png&quot; alt=&quot;Memory Timeline&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When examining this snapshot further, we can clearly see that several tensors are staying alive from the first iteration to the second and later iterations. If we mouse over one of these tensors, it would show a &lt;strong&gt;stack trace suggesting that these were gradient tensors&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And indeed if we go to the code, we can see that &lt;strong&gt;it doesn’t clear the gradient tensors&lt;/strong&gt;, when it could have &lt;strong&gt;cleared them before the forward&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        for _ in range(num_iters):
          pred = model(inputs)
          loss_fn(pred, labels).backward()
          optimizer.step()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        for _ in range(num_iters):
          pred = model(inputs)
          loss_fn(pred, labels).backward()
          optimizer.step()
          # Add this line to clear grad tensors
          optimizer.zero_grad(set_to_none=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can simply add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimizer.zero_grad(set_to_none=True)&lt;/code&gt; instruction to clear the gradient tensors from iteration to iteration (more details about why we need to zero the gradients here: &lt;a href=&quot;https://pytorch.org/tutorials/recipes/recipes/zeroing_out_gradients.html&quot;&gt;https://pytorch.org/tutorials/recipes/recipes/zeroing_out_gradients.html&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is a simplification of a bug we’ve found in more complicated programs using this tool. We encourage you to try out the Memory Snapshot on your GPU memory problems and let us know how it goes.&lt;/p&gt;

&lt;h3 id=&quot;resnet50-after-bug-fix&quot;&gt;ResNet50 after bug fix&lt;/h3&gt;

&lt;p&gt;After applying the fix, the snapshot seems to be clearing the gradients now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/fig5.png&quot; alt=&quot;Memory Timeline&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have the snapshot of a properly working ResNet50 model. Try out the code yourself (see code sample in &lt;strong&gt;Appendix A&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;But you may be wondering, &lt;strong&gt;why is there still an increase in memory after the first iteration?&lt;/strong&gt; To answer this, let’s visit the &lt;strong&gt;Memory Profiler&lt;/strong&gt; in the next section.&lt;/p&gt;

&lt;h2 id=&quot;categorized-memory-usage&quot;&gt;Categorized Memory Usage&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Memory Profiler&lt;/strong&gt; is an added feature of the PyTorch Profiler that &lt;strong&gt;categorizes&lt;/strong&gt; memory usage over time. We still rely on the Memory Snapshot for stack traces for deep dives into memory allocations.&lt;/p&gt;

&lt;p&gt;To generate a memory timeline, here is a code snippet (full code sample in &lt;strong&gt;Appendix B&lt;/strong&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   # Initialize the profiler context with record_shapes, profile_memory,
   # and with_stack set to True.
   with torch.profiler.profile(
       activities=[
           torch.profiler.ProfilerActivity.CPU,
           torch.profiler.ProfilerActivity.CUDA,
       ],
       schedule=torch.profiler.schedule(wait=0, warmup=0, active=6, repeat=1),
       record_shapes=True,
       profile_memory=True,
       with_stack=True,
       on_trace_ready=trace_handler,
   ) as prof:
       # Run the PyTorch Model inside the profile context.
       for _ in range(5):
           prof.step()
           with record_function(&quot;## forward ##&quot;):
               pred = model(inputs)

           with record_function(&quot;## backward ##&quot;):
               loss_fn(pred, labels).backward()

           with record_function(&quot;## optimizer ##&quot;):
               optimizer.step()
               optimizer.zero_grad(set_to_none=True)

   # Construct the memory timeline HTML plot.
   prof.export_memory_timeline(f&quot;{file_prefix}.html&quot;, device=&quot;cuda:0&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For further reference, see &lt;a href=&quot;https://pytorch.org/docs/main/profiler.html&quot;&gt;https://pytorch.org/docs/main/profiler.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Memory Profiler automatically generates categories based on the graph of tensor operations recorded during profiling.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/understanding-gpu-memory-1/fig6.png&quot; alt=&quot;Memory Timeline&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this Memory Timeline collected using the Memory Profiler, we have the same training example as before. We can observe the &lt;strong&gt;gradients in blue are now being cleared&lt;/strong&gt; from iteration to iteration. We can also notice that the &lt;strong&gt;optimizer state in yellow is allocated after the first iteration&lt;/strong&gt;, and is kept constant for the rest of the job.&lt;/p&gt;

&lt;p&gt;This optimizer state is the reason behind the increase of GPU memory from the first iteration to the second. Try out the code yourself (see code sample in &lt;strong&gt;Appendix B&lt;/strong&gt;). The Memory Profiler helps to improve training &lt;strong&gt;memory understanding&lt;/strong&gt; so that model authors can figure out which categories are using the most GPU memory.&lt;/p&gt;

&lt;h2 id=&quot;where-can-i-find-these-tools&quot;&gt;Where can I find these tools?&lt;/h2&gt;

&lt;p&gt;We hope that these tools will greatly improve your ability to debug CUDA OOMs and to understand your memory usage by category.&lt;/p&gt;

&lt;p&gt;The Memory Snapshot and the Memory Profiler are available in the v2.1 release of PyTorch as experimental features.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;More information about the Memory Snapshot can be found in the &lt;a href=&quot;https://pytorch.org/docs/main/torch_cuda_memory.html&quot;&gt;PyTorch Memory docs here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;More details about the Memory Profiler can be found in the &lt;a href=&quot;https://pytorch.org/docs/main/profiler.html&quot;&gt;PyTorch Profiler docs here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;We look forward to hearing from you about any enhancements, bugs or memory stories that our tools helped to solve! As always, please feel free to open new issues on PyTorch’s Github page.&lt;/p&gt;

&lt;p&gt;We are also open to contributions from the OSS community, feel free to tag &lt;a href=&quot;https://github.com/aaronenyeshi&quot;&gt;Aaron Shi&lt;/a&gt; and &lt;a href=&quot;https://github.com/zdevito&quot;&gt;Zachary DeVito&lt;/a&gt; in any Github PRs for reviews.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Really appreciate the content reviewers, &lt;a href=&quot;mailto:marksaroufim@meta.com&quot;&gt;Mark Saroufim&lt;/a&gt; and &lt;a href=&quot;mailto:gchanan@meta.com&quot;&gt;Gregory Chanan&lt;/a&gt;, for reviewing this post and improving its readability.&lt;/p&gt;

&lt;p&gt;Really appreciate the code reviews and feedback from &lt;a href=&quot;mailto:adnanaziz@meta.com&quot;&gt;Adnan Aziz&lt;/a&gt; and &lt;a href=&quot;mailto:ltian@meta.com&quot;&gt;Lei Tian&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;

&lt;h3 id=&quot;appendix-a---resnet50-memory-snapshot-code-example&quot;&gt;Appendix A - ResNet50 Memory Snapshot Code Example&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# (c) Meta Platforms, Inc. and affiliates. 
import logging
import socket
from datetime import datetime, timedelta

import torch

from torchvision import models

logging.basicConfig(
   format=&quot;%(levelname)s:%(asctime)s %(message)s&quot;,
   level=logging.INFO,
   datefmt=&quot;%Y-%m-%d %H:%M:%S&quot;,
)
logger: logging.Logger = logging.getLogger(__name__)
logger.setLevel(level=logging.INFO)

TIME_FORMAT_STR: str = &quot;%b_%d_%H_%M_%S&quot;

# Keep a max of 100,000 alloc/free events in the recorded history
# leading up to the snapshot.
MAX_NUM_OF_MEM_EVENTS_PER_SNAPSHOT: int = 100000

def start_record_memory_history() -&amp;gt; None:
   if not torch.cuda.is_available():
       logger.info(&quot;CUDA unavailable. Not recording memory history&quot;)
       return

   logger.info(&quot;Starting snapshot record_memory_history&quot;)
   torch.cuda.memory._record_memory_history(
       max_entries=MAX_NUM_OF_MEM_EVENTS_PER_SNAPSHOT
   )

def stop_record_memory_history() -&amp;gt; None:
   if not torch.cuda.is_available():
       logger.info(&quot;CUDA unavailable. Not recording memory history&quot;)
       return

   logger.info(&quot;Stopping snapshot record_memory_history&quot;)
   torch.cuda.memory._record_memory_history(enabled=None)

def export_memory_snapshot() -&amp;gt; None:
   if not torch.cuda.is_available():
       logger.info(&quot;CUDA unavailable. Not exporting memory snapshot&quot;)
       return

   # Prefix for file names.
   host_name = socket.gethostname()
   timestamp = datetime.now().strftime(TIME_FORMAT_STR)
   file_prefix = f&quot;{host_name}_{timestamp}&quot;

   try:
       logger.info(f&quot;Saving snapshot to local file: {file_prefix}.pickle&quot;)
       torch.cuda.memory._dump_snapshot(f&quot;{file_prefix}.pickle&quot;)
   except Exception as e:
       logger.error(f&quot;Failed to capture memory snapshot {e}&quot;)
       return

# Simple Resnet50 example to demonstrate how to capture memory visuals.
def run_resnet50(num_iters=5, device=&quot;cuda:0&quot;):
   model = models.resnet50().to(device=device)
   inputs = torch.randn(1, 3, 224, 224, device=device)
   labels = torch.rand_like(model(inputs))
   optimizer = torch.optim.SGD(model.parameters(), lr=1e-2, momentum=0.9)
   loss_fn = torch.nn.CrossEntropyLoss()

   # Start recording memory snapshot history
   start_record_memory_history()

   for _ in range(num_iters):
       pred = model(inputs)
       loss_fn(pred, labels).backward()
       optimizer.step()
       optimizer.zero_grad(set_to_none=True)

   # Create the memory snapshot file
   export_memory_snapshot()

   # Stop recording memory snapshot history
   stop_record_memory_history()

if __name__ == &quot;__main__&quot;:
    # Run the resnet50 model
    run_resnet50()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;appendix-b---resnet50-memory-profiler-code-example&quot;&gt;Appendix B - ResNet50 Memory Profiler Code Example&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# (c) Meta Platforms, Inc. and affiliates. 
import logging
import socket
from datetime import datetime, timedelta

import torch

from torch.autograd.profiler import record_function
from torchvision import models

logging.basicConfig(
   format=&quot;%(levelname)s:%(asctime)s %(message)s&quot;,
   level=logging.INFO,
   datefmt=&quot;%Y-%m-%d %H:%M:%S&quot;,
)
logger: logging.Logger = logging.getLogger(__name__)
logger.setLevel(level=logging.INFO)

TIME_FORMAT_STR: str = &quot;%b_%d_%H_%M_%S&quot;

def trace_handler(prof: torch.profiler.profile):
   # Prefix for file names.
   host_name = socket.gethostname()
   timestamp = datetime.now().strftime(TIME_FORMAT_STR)
   file_prefix = f&quot;{host_name}_{timestamp}&quot;

   # Construct the trace file.
   prof.export_chrome_trace(f&quot;{file_prefix}.json.gz&quot;)

   # Construct the memory timeline file.
   prof.export_memory_timeline(f&quot;{file_prefix}.html&quot;, device=&quot;cuda:0&quot;)

def run_resnet50(num_iters=5, device=&quot;cuda:0&quot;):
   model = models.resnet50().to(device=device)
   inputs = torch.randn(1, 3, 224, 224, device=device)
   labels = torch.rand_like(model(inputs))
   optimizer = torch.optim.SGD(model.parameters(), lr=1e-2, momentum=0.9)
   loss_fn = torch.nn.CrossEntropyLoss()

   with torch.profiler.profile(
       activities=[
           torch.profiler.ProfilerActivity.CPU,
           torch.profiler.ProfilerActivity.CUDA,
       ],
       schedule=torch.profiler.schedule(wait=0, warmup=0, active=6, repeat=1),
       record_shapes=True,
       profile_memory=True,
       with_stack=True,
       on_trace_ready=trace_handler,
   ) as prof:
       for _ in range(num_iters):
           prof.step()
           with record_function(&quot;## forward ##&quot;):
               pred = model(inputs)

           with record_function(&quot;## backward ##&quot;):
               loss_fn(pred, labels).backward()

           with record_function(&quot;## optimizer ##&quot;):
               optimizer.step()
               optimizer.zero_grad(set_to_none=True)

if __name__ == &quot;__main__&quot;:
    # Warm up
    run_resnet50()
    # Run the resnet50 model
    run_resnet50()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>Aaron Shi, Zachary DeVito</name>
        
        
      </author>

      

      

      
        <summary type="html">During your time with PyTorch on GPUs, you may be familiar with this common error message:</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">From PyTorch Conference 2023: From Dinosaurs to Seismic Imaging with Intel</title>
      <link href="https://pytorch.org/blog/dinosaurs-to-seismic-imaging/" rel="alternate" type="text/html" title="From PyTorch Conference 2023: From Dinosaurs to Seismic Imaging with Intel" />
      <published>2023-12-12T00:00:00-08:00</published>
      <updated>2023-12-12T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/dinosaurs-to-seismic-imaging</id>
      <content type="html" xml:base="https://pytorch.org/blog/dinosaurs-to-seismic-imaging/">&lt;p&gt;&lt;img src=&quot;/assets/images/hunting-dinosaurs-with-intel-ai-fig1.jpeg&quot; alt=&quot;Dinosaur fossil&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lightning-talk-1-seismic-data-to-subsurface-models-with-openfwi&quot;&gt;Lightning Talk 1: Seismic Data to Subsurface Models with OpenFWI&lt;/h2&gt;

&lt;p&gt;Speaker: Benjamin Consolvo, AI Software Engineering Manager, Intel, &lt;a href=&quot;https://linkedin.com/in/bconsolvo&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;session-overview&quot;&gt;Session Overview&lt;/h3&gt;

&lt;p&gt;In this session, Ben begins with an overview of seismic imaging and full waveform inversion (FWI). Seismic imaging and FWI helps us to explore land for important subsurface minerals necessary for human thriving. To find those crucial subsurface minerals, we need to image the subsurface with a high degree of accuracy at a low cost, which involves two main challenges. He explains the solutions for those challenges using AI, which are summarized below.&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Challenges&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Solutions using AI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Traditional physics based FWI requires an accurate starting model.
   &lt;/td&gt;
   &lt;td&gt;Data-driven deep learning solutions do not require an accurate starting model.
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;GPUs are typically used for fine-tuning neural networks but are often unavailable and expensive.
   &lt;/td&gt;
   &lt;td&gt;CPUs are highly available, inexpensive, and viable for AI fine-tuning. The new 4&lt;sup&gt;th&lt;/sup&gt; Gen Intel® Xeon® Scalable processor has the built-in AI accelerator engine called Intel® AMX (Intel® Advanced Matrix Extensions) that helps to accelerate AI training and inference performance. 
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Next, he shows the wave propagation for the subsurface model and corresponding seismic shot gathers. In his example, the shot gathers are synthetically generated time-sampled records of sounds recordings from a shot (like a dynamite explosion or vibroseis truck) recorded by geophones spread across a large area. For this application, the training data consists of a pair of subsurface model image and seismic shot gather images, where the model from the shot gather is predicted.&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Number of Seismic Shot Images&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Number of subsurface model images&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Train&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;120,000
   &lt;/td&gt;
   &lt;td&gt;24,000
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Test&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;25,000
   &lt;/td&gt;
   &lt;td&gt;5,000
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Validation&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;5,000
   &lt;/td&gt;
   &lt;td&gt;1,000
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;In this application, the algorithm used during training was InversionNET (encoder-decoder convolutional neural network). Check out the implementation details for InversionNET architecture in &lt;a href=&quot;https://arxiv.org/abs/2111.02926&quot;&gt;Deng et al. (2021)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He then shows the results:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Prediction versus ground truth model after one epoch and at 50 epochs. After training InversionNET, the predicted model is much closer to the ground truth image.&lt;/li&gt;
  &lt;li&gt;Training loss and validation loss curves decreasing over time across 50 epochs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, Ben concludes his talk by highlighting that he was able to successfully fine-tune a deep neural network without an accurate starting model to obtain subsurface model on a 4th generation Intel® Xeon® Scalable processor.&lt;/p&gt;

&lt;p&gt;Watch the &lt;a href=&quot;https://www.youtube.com/watch?v=TPp_Zyco6X4&amp;amp;list=PL_lsbAsL_o2BivkGLiDfHY9VqWlaNoZ2O&amp;amp;index=56&quot;&gt;full video recording here&lt;/a&gt; and download the &lt;a href=&quot;https://static.sched.com/hosted_files/pytorch2023/57/20231017_Consolvo_Seismic_PyTorchConf.pdf&quot;&gt;presentation&lt;/a&gt;. More details can be found in this &lt;a href=&quot;https://medium.com/better-programming/seismic-data-to-subsurface-models-with-openfwi-bcca0218b4e8&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;about-the-speaker&quot;&gt;About the Speaker&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ben-consolvo.jpg&quot; alt=&quot;Ben Consolvo&quot; style=&quot;max-width:220px;float:right;margin-left: 20px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ben Consolvo is an AI Solutions Engineering Manager at Intel. He has been building a team and a program around Intel’s AI technology paired with Intel’s hardware offerings. He brings a background and passion in data science, particularly in deep learning (DL) and computer vision. He has applied his skills in DL in the cybersecurity industry to automatically identify phishing websites, as well as to the oil and gas industry to identify subsurface features for geophysical imaging.&lt;/p&gt;

&lt;h2 id=&quot;lightning-talk-2-dinosaur-bone-hunt&quot;&gt;Lightning Talk 2: Dinosaur Bone Hunt&lt;/h2&gt;

&lt;p&gt;Speaker: Bob Chesebrough, Sr Solution Architect, Intel, &lt;a href=&quot;https://www.linkedin.com/in/robertchesebrough/&quot;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;session-overview-1&quot;&gt;Session Overview&lt;/h3&gt;

&lt;p&gt;In this session, Bob starts the presentation by explaining his interest in collecting dinosaur bones and gives an overview of &lt;a href=&quot;https://www.intel.com/content/www/us/en/developer/topic-technology/artificial-intelligence/overview.html&quot;&gt;Intel AI Software portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He then explains the steps to create a dinosaur site treasure map or dinosaur bone likelihood map:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Collect data and create training data (New Mexico aerial photos of the Morrison Formation - a famous dinosaur bone bed in the Western United States and the GPS coordinates for small bone fragments discovered)&lt;/li&gt;
  &lt;li&gt;Train a simple ResNet 18 model using &lt;a href=&quot;https://www.intel.com/content/www/us/en/developer/tools/oneapi/optimization-for-pytorch.html#gs.1jggir&quot;&gt;Intel® Extension for PyTorch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Score the model on Utah photos and create a heat map&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, Bob shows the results that dinosaur bones were discovered in Utah using dinosaur bone likelihood map. Go to the &lt;a href=&quot;https://github.com/intelsoftware/jurassic&quot;&gt;GitHub repository&lt;/a&gt; to access the code sample and try out the sample using Intel Extension for PyTorch.&lt;/p&gt;

&lt;p&gt;Watch the &lt;a href=&quot;https://www.youtube.com/watch?v=Q_soyAhduKk&amp;amp;list=PL_lsbAsL_o2BivkGLiDfHY9VqWlaNoZ2O&amp;amp;index=67&quot;&gt;full video recording here&lt;/a&gt; and download the &lt;a href=&quot;https://static.sched.com/hosted_files/pytorch2023/86/PyTorch_Conf_Chesebrough_2023_PPT.pdf&quot;&gt;presentation&lt;/a&gt;. More details can be found in this &lt;a href=&quot;https://www.intel.com/content/www/us/en/developer/articles/technical/intel-ai-step-by-step-guide-for-hunting-dinosaurs.html&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;about-the-speaker-1&quot;&gt;About the Speaker&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bob-chesebrough.jpg&quot; alt=&quot;Bob Chesebrough&quot; style=&quot;max-width:220px;float:right;margin-left: 20px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bob Chesebrough’s industry experience is software development/AI solution engineering for fortune 100 companies and national laboratories for over three decades. He is also a hobbyist who has logged over 800 miles and 1000 hours in the field finding dinosaur bones. He and his sons discovered an important fossil of the only known crocodilian from the Jurassic in New Mexico, they have also discovered and logged into the museum 2000+ bones localities and described a new mass bone bed in New Mexico.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ramya Ravi, Susan Kahler at Intel</name>
        
        
      </author>

      

      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Snowflake Joins the PyTorch Foundation as a General Member</title>
      <link href="https://pytorch.org/blog/snowflake-joins-pytorch/" rel="alternate" type="text/html" title="Snowflake Joins the PyTorch Foundation as a General Member" />
      <published>2023-12-05T00:00:00-08:00</published>
      <updated>2023-12-05T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/snowflake-joins-pytorch</id>
      <content type="html" xml:base="https://pytorch.org/blog/snowflake-joins-pytorch/">&lt;p&gt;&lt;img src=&quot;/assets/images/snowflake-logo.svg&quot; alt=&quot;Snowflake logo&quot; style=&quot;max-width:350px;float:right;margin: 20px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The PyTorch Foundation, a neutral home for the deep learning community to collaborate on the open source PyTorch framework and ecosystem, is announcing today that Snowflake has joined as a general member.&lt;/p&gt;

&lt;p&gt;Snowflake enables thousands of organizations to unite siloed data, discover and securely share data, power data applications, and execute diverse AI/ML and analytic workloads across multiple clouds and geographies.&lt;/p&gt;

&lt;p&gt;“By joining the PyTorch community, we know that Snowflake will help accelerate data warehousing solutions and cutting-edge AI frameworks. This showcases the commitment to advancing innovation for data and artificial intelligence,” said Ibrahim Haddad, Executive Director, PyTorch Foundation. “We are thrilled to have Snowflake join the PyTorch Foundation, marking a significant stride in the convergence of data management and deep learning technologies.”&lt;/p&gt;

&lt;p&gt;Snowflake enables collaboration with AI technologies to handle the storage and analysis of large datasets generated by machine learning and AI applications through scalability and SQL support.&lt;/p&gt;

&lt;p&gt;With the integrated repository of Python libraries from Anaconda in Snowpark, Snowflake users have always had a streamlined experience to deploy pre-trained PyTorch models in Snowflake to easily and securely make them a part of applications. Now with the addition of GPU instances in Snowpark Container Services (in private preview), training and other computationally intensive processing using PyTorch will also be streamlined, providing teams with an end-to-end solution for AI development and deployment.&lt;/p&gt;

&lt;p&gt;“Most if not all of our customers incorporate open source software as part of their data stacks, so it is critical for us to work with open source ecosystems like the PyTorch Foundation, alongside incorporating open source to meet the needs of our customers,” said Adrien Treuille, Co-Founder of Streamlit, Director of Product Management at Snowflake. “As AI developers continue to integrate their models as part of applications, the power of Snowflake and PyTorch — coupled with Streamlit as the powerful front-end — creates near-limitless innovation for developers looking to build next-generation apps and unlock even more use cases.”&lt;/p&gt;

&lt;p&gt;To learn more about the power of Snowflake and PyTorch, tune into Snowflake’s developer conference for AI and apps, BUILD.&lt;/p&gt;

&lt;p&gt;To learn more about how you can be a part of the PyTorch Foundation, visit our &lt;a href=&quot;https://pytorch.org/join&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about-snowflake&quot;&gt;About Snowflake&lt;/h2&gt;

&lt;p&gt;Snowflake enables every organization to mobilize their data with Snowflake’s Data Cloud. Customers use the Data Cloud to unite siloed data, discover and securely share data, power data applications, and execute diverse AI/ML and analytic workloads. Wherever data or users live, Snowflake delivers a single data experience that spans multiple clouds and geographies. Thousands of customers across many industries, including 639 of the 2023 Forbes Global 2000 (G2K) as of July 31, 2023, use Snowflake Data Cloud to power their businesses. Learn more at &lt;a href=&quot;https://www.snowflake.com/&quot;&gt;snowflake.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;about--pytorch-foundation&quot;&gt;About  PyTorch Foundation&lt;/h2&gt;

&lt;p&gt;The PyTorch Foundation is a neutral home for the deep learning community to collaborate on the open source PyTorch framework and ecosystem. The PyTorch Foundation is supported by its members and leading contributors to the PyTorch open source project. The Foundation leverages resources provided by members and contributors to enable community discussions and collaboration.&lt;/p&gt;

&lt;h2 id=&quot;about-the-linux-foundation&quot;&gt;About The Linux Foundation&lt;/h2&gt;

&lt;p&gt;The Linux Foundation is the world’s leading home for collaboration on open source software, hardware, standards, and data. Linux Foundation projects are critical to the world’s infrastructure including Linux, Kubernetes, Node.js, ONAP, PyTorch, RISC-V, SPDX, OpenChain, and more. The Linux Foundation focuses on leveraging best practices and addressing the needs of contributors, users, and solution providers to create sustainable models for open collaboration. For more information, please visit us at linuxfoundation.org. The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see its &lt;a href=&quot;https://www.linuxfoundation.org/trademark-usage&quot;&gt;trademark usage page&lt;/a&gt;. Linux is a registered trademark of Linus Torvalds.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Facebook</name>
        
        
      </author>

      

      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Accelerating Generative AI with PyTorch II: GPT, Fast</title>
      <link href="https://pytorch.org/blog/accelerating-generative-ai-2/" rel="alternate" type="text/html" title="Accelerating Generative AI with PyTorch II: GPT, Fast" />
      <published>2023-11-30T00:00:00-08:00</published>
      <updated>2023-11-30T00:00:00-08:00</updated>
      <id>https://pytorch.org/blog/accelerating-generative-ai-2</id>
      <content type="html" xml:base="https://pytorch.org/blog/accelerating-generative-ai-2/">&lt;p&gt;This post is the second part of a multi-series blog focused on how to accelerate generative AI models with pure, native PyTorch. We are excited to share a breadth of newly released PyTorch performance features alongside practical examples to see how far we can push PyTorch native performance. In part one, we showed how to accelerate &lt;a href=&quot;https://pytorch.org/blog/accelerating-generative-ai/&quot;&gt;Segment Anything over 8x&lt;/a&gt; using only pure, native PyTorch. In this blog we’ll focus on LLM optimization.&lt;/p&gt;

&lt;p&gt;Over the past year, generative AI use cases have exploded in popularity. Text generation has been one particularly popular area, with lots of innovation among open-source projects such as &lt;a href=&quot;https://github.com/ggerganov/llama.cpp&quot;&gt;llama.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/vllm-project/vllm&quot;&gt;vLLM&lt;/a&gt;, and &lt;a href=&quot;https://github.com/mlc-ai/mlc-llm&quot;&gt;MLC-LLM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While these projects are performant, they often come with tradeoffs in ease of use, such as requiring model conversion to specific formats or building and shipping new dependencies. This begs the question: &lt;strong&gt;how fast can we run transformer inference with only pure, native PyTorch?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As announced during our recent &lt;a href=&quot;https://www.youtube.com/watch?v=IWpM_9AsC-U&quot;&gt;PyTorch Developer Conference&lt;/a&gt;, the PyTorch team wrote a from-scratch LLM &lt;strong&gt;almost 10x faster than baseline,&lt;/strong&gt; with no loss of accuracy, all using native PyTorch optimizations. We leverage a breadth of optimizations including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://pytorch.org/tutorials/intermediate/torch_compile_tutorial.html&quot;&gt;Torch.compile&lt;/a&gt;&lt;/strong&gt;: A compiler for PyTorch models&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/pytorch-labs/ao/tree/main#torchao&quot;&gt;GPU quantization&lt;/a&gt;&lt;/strong&gt;: Accelerate models with reduced precision operations&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/generate.py#L76&quot;&gt;Speculative Decoding&lt;/a&gt;&lt;/strong&gt;: Accelerate LLMs using a small “draft” model to predict large “target” model’s output&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/tp.py&quot;&gt;Tensor Parallelism&lt;/a&gt;&lt;/strong&gt;: Accelerate models by running them across multiple devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, even better, we can do it in &lt;strong&gt;less than 1000 lines of native PyTorch code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If this excites you enough to jump straight into the code, check it out at &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast&quot;&gt;https://github.com/pytorch-labs/gpt-fast&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/screen-recording.gif&quot; alt=&quot;Screen recording&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: We will be focusing on latency (i.e. batch size=1) for all of these benchmarks. Unless otherwise specified, all benchmarks are run on an A100-80GB, power limited to 330W.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;starting-point-255-toks&quot;&gt;Starting Point (25.5 tok/s)&lt;/h2&gt;

&lt;p&gt;Let’s start off with an extremely basic and simple implementation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image23.png&quot; alt=&quot;simple implementation&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sadly, this does not perform very well. But why? Looking at a trace reveals the answer - it’s heavily &lt;strong&gt;CPU overhead bound&lt;/strong&gt;! What this means is that our CPU is not able to tell the GPU what to do fast enough for the GPU to be fully utilized.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image14.png&quot; alt=&quot;trace&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine the GPU as this super massive factory with a ridiculous amount of compute available. Then, imagine the CPU as some messenger shuttling instructions back and forth to the GPU. Remember, in large scale deep learning systems, the GPU is responsible for doing 100% of the work! In such systems, the only role of the CPU is to tell the GPU what work it should be doing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image16.png&quot; alt=&quot;factory&quot; style=&quot;width:100%;display: block;max-width:500px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, the CPU runs over and tells the GPU to do an “add”, but by the time the CPU can give the GPU another chunk of work, the GPU has long finished the previous chunk of work.&lt;/p&gt;

&lt;p&gt;Despite the fact that the GPU needs to perform thousands of computations while the CPU only needs to do orchestration work, this is surprisingly common! There’s a variety of reasons for this, ranging from the fact that the CPU is likely running some single-threaded Python to the fact that GPUs are just incredibly fast nowadays.&lt;/p&gt;

&lt;p&gt;Regardless of the reason, we now find ourselves in the &lt;strong&gt;overhead-bound regime&lt;/strong&gt;. So, what can we do? One, we could rewrite our implementation in C++, perhaps even eschew frameworks entirely and write raw CUDA. Or…. we could just send more work to the GPU at once.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image3.png&quot; alt=&quot;factory&quot; style=&quot;width:100%;display: block;max-width:500px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By just sending a massive chunk of work at once, we can keep our GPU busy! Although during training, this may just be accomplished by increasing your batch size, how do we do this during inference?&lt;/p&gt;

&lt;p&gt;Enter torch.compile.&lt;/p&gt;

&lt;h2 id=&quot;step-1-reducing-cpu-overhead-through-torchcompile-and-a-static-kv-cache-1070-toks&quot;&gt;Step 1: Reducing CPU overhead through torch.compile and a static kv-cache (107.0 tok/s)&lt;/h2&gt;

&lt;p&gt;Torch.compile allows us to capture a larger region into a single compiled region, and particularly when run with mode=”reduce-overhead”, is very effective at reducing CPU overhead. Here, we also specify fullgraph=True, which validates that there are no “graph breaks” in your model (i.e. portions that torch.compile cannot compile). In other words, it ensures that torch.compile is running to its fullest potential.&lt;/p&gt;

&lt;p&gt;To apply it, we &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/generate.py#L296&quot;&gt;simply wrap a function (or a module) with it&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;torch.compile(decode_one_token, mode=&quot;reduce-overhead&quot;, fullgraph=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there are a couple of nuances here that make it somewhat nontrivial for folks to get significant performance boosts from applying torch.compile to text generation.&lt;/p&gt;

&lt;p&gt;The first obstacle is the kv-cache. The kv-cache is an inference-time optimization that caches the activations computed for the previous tokens (see &lt;a href=&quot;https://www.dipkumar.dev/becoming-the-unbeatable/posts/gpt-kvcache/&quot;&gt;here&lt;/a&gt; for a more in-depth explanation). However, as we generate more tokens, the “logical length” of the kv-cache grows. This is problematic for two reasons. One is that reallocating (and copying!) the kv-cache every time the cache grows is simply expensive. The other one is that this dynamism makes it harder to reduce the overhead, as we are no longer able to leverage approaches like cudagraphs.&lt;/p&gt;

&lt;p&gt;To resolve this, we use a&lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/0afae1ace441ce4c5d02ef11a72da28cf7ca4795/generate.py#L154&quot;&gt; “static” kv-cache&lt;/a&gt;, which means that we statically allocate the maximum size of the kv-cache, and then mask out the unused values in the attention portion of the computation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image2.png&quot; alt=&quot;code&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second obstacle is the prefill phase. Transformer text generation is best thought of as a two phase process: 1. The prefill where the entire prompt is processed, and 2. Decoding where each token is generated autoregressively.&lt;/p&gt;

&lt;p&gt;Although decoding can be made entirely static once the kv-cache is made static, the prefill stage still requires significantly more dynamism, due to having a variable prompt length. Thus, we actually need to compile the two stages with separate compilation strategies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image9.png&quot; alt=&quot;compile&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although these details are a bit tricky, the actual implementation is not very difficult at all (see gpt-fast)! And the performance boost is dramatic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image28.png&quot; alt=&quot;chart&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of a sudden, our performance improves by more than 4x! Such performance gains are often common when one’s workload is overhead bound.&lt;/p&gt;

&lt;h2 id=&quot;sidenote-how-is-torchcompile-helping&quot;&gt;Sidenote: How is torch.compile helping?&lt;/h2&gt;

&lt;p&gt;It is worth disentangling how exactly torch.compile is improving performance. There’s 2 main factors leading to torch.compile’s performance.&lt;/p&gt;

&lt;p&gt;The first factor, like mentioned above, is overhead reduction. Torch.compile is able to reduce overhead through a variety of optimizations, but one of the most effective ones is called &lt;a href=&quot;https://pytorch.org/blog/accelerating-pytorch-with-cuda-graphs/&quot;&gt;CUDAGraphs&lt;/a&gt;. Although torch.compile applies this automatically for you when “reduce-overhead” is set, saving the extra work and code you need to write when doing this yourself manually  without torch.compile.&lt;/p&gt;

&lt;p&gt;The second factor, however, is that torch.compile simply generates faster kernels. In the decoding benchmark above, torch.compile actually generates every single kernel from scratch, including both the matrix multiplications and the attention! And even cooler, these kernels are actually faster than the built in alternatives (CuBLAS and FlashAttention2)!&lt;/p&gt;

&lt;p&gt;This may sound implausible to many of you, considering how hard it is to write efficient matrix multiplication/attention kernels, and how much manpower has been put into CuBLAS and FlashAttention. The key here, however, is that transformer decoding has very unusual computational properties. In particular, because of the KV-cache, for BS=1 &lt;em&gt;every single matrix multiplication in a transformer is actually a matrix vector multiplication&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This means that the computations are completely &lt;em&gt;memory-bandwidth bound&lt;/em&gt;, and as such, are well within the range of compilers to automatically generate. And in fact, when we benchmark torch.compile’s matrix-vector multiplications against CuBLAS, we find that torch.compile’s kernels are actually quite a bit faster!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image24.png&quot; alt=&quot;code&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image17.png&quot; alt=&quot;code&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-alleviating-memory-bandwidth-bottleneck-through-int8-weight-only-quantization-1574-toks&quot;&gt;Step 2: Alleviating memory bandwidth bottleneck through int8 weight-only quantization (157.4 tok/s)&lt;/h2&gt;

&lt;p&gt;So, given that we’ve already seen massive speedups from applying torch.compile, is it possible to do even better? One way to think about this problem is to compute how close we are to the theoretical peak. In this case, the largest bottleneck is the cost of loading the weights from GPU global memory to registers. In other words, each forward pass requires us to “touch” every single parameter on the GPU. So, how fast can we theoretically “touch” every single parameter in a model?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image11.png&quot; alt=&quot;weights&quot; style=&quot;width:100%;display: block;max-width:500px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To measure this, we can use &lt;strong&gt;Model Bandwidth Utilization (MBU).&lt;/strong&gt; This measures what percentage of our memory bandwidth we’re able to use during inference.&lt;/p&gt;

&lt;p&gt;Computing it is pretty simple. We simply take the total size of our model (# params * bytes per param) and multiply it by the number of inferences we can do per second. Then, we divide this by the peak bandwidth of the GPU to get our MBU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image8.png&quot; alt=&quot;MBU&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, for our above case, we have a 7B parameter model. Each parameter is stored in fp16 (2 bytes per parameter), and we achieved 107 tokens/s. Finally, our A100-80GB has a theoretical 2 TB/s of memory bandwidth.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image25.png&quot; alt=&quot;MBU&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Putting this all together, we get **72% MBU! **This is quite good, considering that even just copying memory struggles to break 85%.&lt;/p&gt;

&lt;p&gt;But… it does mean that we’re pretty close to the theoretical limit here, and that we’re clearly bottlenecked on just loading our weights from memory. It doesn’t matter what we do - without changing the problem statement in some manner, we might only be able to eek out another 10% in performance.&lt;/p&gt;

&lt;p&gt;Let’s take another look at the above equation. We can’t really change the number of parameters in our model. We can’t really change the memory bandwidth of our GPU (well, without paying more money). But, we &lt;strong&gt;can&lt;/strong&gt; change how many bytes each parameter is stored in!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image18.png&quot; alt=&quot;MBU&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thus, we arrive at our next technique - int8 quantization. The idea here is simple. If loading our weights from memory is our main bottleneck, why don’t we just make the weights smaller?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image7.png&quot; alt=&quot;MBU&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that this is quantizing &lt;em&gt;only&lt;/em&gt; the weights - the computation itself is still done in bf16. This makes this form of quantization easy to apply with very little to no accuracy degradation.&lt;/p&gt;

&lt;p&gt;Moreover, torch.compile can also easily generate efficient code for int8 quantization. Let’s look again at the above benchmark, this time with int8 weight-only quantization included.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image1.png&quot; alt=&quot;code&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image27.png&quot; alt=&quot;code&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the dark blue line (torch.compile + int8), there is a significant performance improvement when using torch.compile + int8 weight-only quantization! Moreover, the light-blue line (no torch.compile + int8) is actually much worse than even the fp16 performance! This is because in order to take advantage of the perf benefits of int8 quantization, we need the kernels to be fused. This shows one of the benefits of torch.compile - these kernels can be automatically generated for the user!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/quantize.py#L314&quot;&gt;Applying int8 quantization to our model&lt;/a&gt;, we see a nice 50% performance improvement, bringing us up to 157.4 tokens/s!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image19.png&quot; alt=&quot;chart&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3-reframing-the-problem-using-speculative-decoding&quot;&gt;Step 3: Reframing the problem using speculative decoding&lt;/h2&gt;

&lt;p&gt;Even after using techniques like quantization, we’re still faced with another problem. In order to generate 100 tokens, we must load our weights 100 times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image5.png&quot; alt=&quot;diagram&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even if the weights are quantized, we still must load our weights over and over, once for each token we generate! Is there any way around this?&lt;/p&gt;

&lt;p&gt;At first glance, the answer might seem like no - there’s a strict serial dependency in our autoregressive generation. However, as it turns out, by utilizing &lt;a href=&quot;https://arxiv.org/abs/2211.17192&quot;&gt;speculative decoding&lt;/a&gt;, we’re able to break this strict serial dependency and obtain speedups!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image21.png&quot; alt=&quot;engineers&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine you had a senior engineer (called Verity), who makes the right technical decisions but is rather slow at writing code. However, you also have a junior engineer (called Drake), who doesn’t always make the right technical decisions but can write code much faster (and cheaper!) than Verity. How can we take advantage of Drake (the junior engineer) to write code faster while ensuring that we are still making the right technical decisions?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image6.png&quot; alt=&quot;engineers&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, Drake goes through the labor-intensive process of writing the code, making technical decisions along the way. Next, we give the code to Verity to review.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image15.png&quot; alt=&quot;engineers&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Upon reviewing the code, Verity might decide that the first 3 technical decisions Drake made are correct, but the last 2 need to be redone. So, Drake goes back, throws away his last 2 decisions, and restarts coding from there.&lt;/p&gt;

&lt;p&gt;Notably, although Verity (the senior engineer) has only looked at the code once, we are able to generate 3 pieces of validated code identical to what she would have written! Thus, assuming Verity is able to review the code faster than it would have taken her to write those 3 pieces herself, this approach comes out ahead.&lt;/p&gt;

&lt;p&gt;In the context of transformer inference, Verity would be played by the role of the larger model whose outputs we want for our task, called the &lt;strong&gt;verifier model&lt;/strong&gt;. Similarly, Drake would be played by a smaller model that’s able to generate text much faster than the larger model, called the &lt;strong&gt;draft model&lt;/strong&gt;. So, we would generate 8 tokens using the draft model, and then process all eight tokens in parallel using the verifier model, throwing out the ones that don’t match.&lt;/p&gt;

&lt;p&gt;Like mentioned above, one crucial property of speculative decoding is that &lt;strong&gt;it does not change the quality of the output&lt;/strong&gt;. As long as the time it takes for generating the tokens using the draft model + verifying the tokens is less than it would have taken to generate those tokens, we come out ahead.&lt;/p&gt;

&lt;p&gt;One of the great things about doing this all in native PyTorch is that this technique is actually really easy to implement! Here’s the &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/generate.py#L76&quot;&gt;entirety of the implementation&lt;/a&gt;, in about 50 lines of native PyTorch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image10.png&quot; alt=&quot;code&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although speculative decoding guarantees that we have mathematically identical results compared to regular generation, it does have the property that the runtime performance varies depending on the generated text, as well as how aligned the draft and verifier model are. For example, when running CodeLlama-34B + CodeLlama-7B, we’re able to obtain a 2x boost in tokens/s for generating code. On the other hand, when using Llama-7B + TinyLlama-1B, we’re only able to obtain about a 1.3x boost in tokens/s.&lt;/p&gt;

&lt;h2 id=&quot;sidenote-running-this-on-amd&quot;&gt;Sidenote: Running this on AMD&lt;/h2&gt;

&lt;p&gt;Like mentioned above, every single kernel in decoding is generated from scratch by torch.compile, and is converted into OpenAI Triton. As AMD has a &lt;a href=&quot;https://pytorch.org/blog/experience-power-pytorch-2.0/&quot;&gt;torch.compile backend&lt;/a&gt; (and also a Triton backend), we can simply go through all of the optimizations above… but on an AMD GPU! With int8 quantization, we’re able to achieve 102.5 tokens/s with one GCD (i.e. one half) of a MI250x!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image4.png&quot; alt=&quot;chart&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-reducing-the-size-of-the-weights-even-more-with-int4-quantization-and-gptq-2021-toks&quot;&gt;Step 4: Reducing the size of the weights even more with int4 quantization and GPTQ (202.1 tok/s)&lt;/h2&gt;

&lt;p&gt;Of course, if reducing the weights down from 16 bits to 8 bits allows for speedups by reducing the number of bytes we need to load, reducing the weights down to 4 bits would result in even larger speedups!&lt;/p&gt;

&lt;p&gt;Unfortunately, when reducing weights down to 4-bits, the accuracy of the model starts to become a much larger concern. From our preliminary evals, we see that although using int8 weight-only quantization has no perceptible accuracy degradation, using int4 weight-only quantization does.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image13.png&quot; alt=&quot;table&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are 2 main tricks we can use to limit the accuracy degradation of int4 quantization.&lt;/p&gt;

&lt;p&gt;The first one is to have a more granular scaling factor. One way to think about the scaling factor is that when we have a quantized tensor representation, it is on a sliding scale between a floating point tensor (each value has a scaling factor) and an integer tensor (no values have a scaling factor). For example, with int8 quantization, we had one scaling factor per row. If we want higher accuracy, however, we can change that to “one scaling factor per 32 elements”. We choose a group size of 32 to minimize accuracy degradation, and this is also a common choice among the community.&lt;/p&gt;

&lt;p&gt;The other one is to use a more advanced quantization strategy than simply rounding the weights. For example, approaches like &lt;a href=&quot;https://arxiv.org/abs/2210.17323&quot;&gt;GPTQ&lt;/a&gt; leverage example data in order to calibrate the weights more accurately. In this case, we prototype an implementation of GPTQ in the repository based off of PyTorch’s recently released &lt;a href=&quot;https://pytorch.org/tutorials/intermediate/torch_export_tutorial.html&quot;&gt;torch.export&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, we need kernels that fuse int4 dequantize with the matrix vector multiplication. In this case, torch.compile is unfortunately not able to generate these kernels from scratch, so we leverage some handwritten CUDA kernels in PyTorch.&lt;/p&gt;

&lt;p&gt;These techniques require some additional work, but putting them all together results in even better performance!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image12.png&quot; alt=&quot;chart&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-5-combining-everything-together-2447-toks&quot;&gt;Step 5: Combining everything together (244.7 tok/s)&lt;/h2&gt;

&lt;p&gt;Finally, we can compose all of the techniques together to achieve even better performance!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image22.png&quot; alt=&quot;chart&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-6-using-tensor-parallelism&quot;&gt;Step 6: Using Tensor Parallelism&lt;/h2&gt;

&lt;p&gt;So far, we’ve been restricting ourselves to minimizing latency while on a single GPU. In many settings, however, we have access to multiple GPUs. This allows us to improve our latency further!&lt;/p&gt;

&lt;p&gt;To get an intuitive sense of why this would allow us to improve our latency, let’s take a look at the prior equation for MBU, particularly the denominator. Running on multiple GPUs gives us access to more memory bandwidth, and thus, higher potential performance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image8.png&quot; alt=&quot;MBU&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As for which parallelism strategy to pick, note that in order to reduce our latency for one example, we need to be able to leverage our memory bandwidth across more devices simultaneously. This means that we need to split the processing of one token across multiple devices. In other words, we need to use tensor parallelism.&lt;/p&gt;

&lt;p&gt;Luckily, PyTorch also provides low-level tools for tensor-parallelism that compose with torch.compile. We are also working on higher-level APIs for expressing tensor parallelism, stay tuned for those!&lt;/p&gt;

&lt;p&gt;However, even without a higher-level API, it’s actually still quite easy to add tensor parallelism. Our implementation comes in at &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/tp.py&quot;&gt;150 lines of code&lt;/a&gt;, and doesn’t require any model changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image20.png&quot; alt=&quot;code&quot; style=&quot;width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are still able to take advantage of all the optimizations mentioned previously, which all can continue to compose with tensor parallelism. Combining these together, we’re able to serve Llama-70B at 55 tokens/s with int8 quantization!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/accelerating-generative-ai-2/image26.png&quot; alt=&quot;chart&quot; style=&quot;width:100%;display: block;max-width:600px; margin-left:auto; margin-right:auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Let’s take a look at what we’re able to accomplish.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Simplicity: Ignoring quantization, &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/model.py&quot;&gt;model.py&lt;/a&gt; (244 LOC) + &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/generate.py&quot;&gt;generate.py&lt;/a&gt; (371 LOC) + &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast/blob/main/tp.py&quot;&gt;tp.py&lt;/a&gt; (151 LOC) comes out to 766 LOC to implement fast inference + speculative decoding + tensor-parallelism.&lt;/li&gt;
  &lt;li&gt;Performance: With Llama-7B, we’re able to use compile + int4 quant + speculative decoding to reach 241 tok/s. With llama-70B, we’re able to also throw in tensor-parallelism to reach 80 tok/s. These are both close to or surpassing SOTA performance numbers!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PyTorch has always allowed for simplicity, ease of use, and flexibility. However, with torch.compile, we can throw in performance as well.&lt;/p&gt;

&lt;p&gt;The code can be found here: &lt;a href=&quot;https://github.com/pytorch-labs/gpt-fast&quot;&gt;https://github.com/pytorch-labs/gpt-fast&lt;/a&gt;. We hope that the community finds it useful. Our goal with this repo is not to provide another library or framework for people to import. Instead, we encourage users to copy-paste, fork, and modify the code in the repo.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;We would like to thank the vibrant open source community for their continual support of scaling LLMs, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lightning AI for supporting pytorch and work in flash attention, int8 quantization, and LoRA fine-tuning.&lt;/li&gt;
  &lt;li&gt;GGML for driving forward fast, on device inference of LLMs&lt;/li&gt;
  &lt;li&gt;Andrej Karpathy for spearheading simple, interpretable and fast LLM implementations&lt;/li&gt;
  &lt;li&gt;MLC-LLM for pushing 4-bit quantization performance on heterogenous hardware&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Facebook</name>
        
        
      </author>

      

      

      
        <summary type="html">This post is the second part of a multi-series blog focused on how to accelerate generative AI models with pure, native PyTorch. We are excited to share a breadth of newly released PyTorch performance features alongside practical examples to see how far we can push PyTorch native performance. In part one, we showed how to accelerate Segment Anything over 8x using only pure, native PyTorch. In this blog we’ll focus on LLM optimization.</summary>
      

      
      
    </entry>
  
</feed>


